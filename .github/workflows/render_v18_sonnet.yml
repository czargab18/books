name: render-books
description: Renderiza livros Quarto e cria PR para revisão

on:
  push:
    branches: [main]
    paths: ["build/**/*.qmd", "build/**/*.yml", "build/*.bib"]
  workflow_dispatch:

permissions:
  contents: write
  actions: write

env:
  USERNAME: ${{ github.repository_owner }}
  USEREMAIL: ${{ secrets.USEREMAIL }}
  TOKEN: ${{ secrets.TOKEN_REPO_SYNC }}

jobs:
  render:
    runs-on: ubuntu-latest
    outputs:
      pull-request-number: ${{ steps.create-pr.outputs.pull-request-number }}
    steps:
      - name: Checkout repositório
        uses: actions/checkout@v4
        with:
          token: ${{ env.TOKEN }}
          fetch-depth: 0

      - name: Configura Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Cria diretório de renderização
        run: |
          echo "📁 Criando diretório para livros renderizados..."
          mkdir -p _rendered

      - name: Lista livros válidos
        id: list-books
        run: |
          echo "🔍 Buscando livros com padrão [A-Z]{3}[0-9]{4}..."
          find build -maxdepth 1 -type d -regex '.*/[A-Z]{3}[0-9]{4}' -printf '%f\n' | sort > book_list.txt

      - name: Renderiza livros Quarto
        run: |
          for folder in $(cat book_list.txt); do
            if [ -d "build/$folder" ]; then
              quarto render "build/$folder" --to html --execute --output-dir "_rendered/$folder"
            fi
          done
      
      - name: Sincronizar '_rendered/' e 'book/'
        run: |
          echo "🔄 Removendo arquivos duplicados de book/..."
          for folder in $(ls _rendered 2>/dev/null); do
            if [ -d "book/$folder" ]; then
              for file in $(find _rendered/$folder -type f); do
                relpath=${file#_rendered/}
                if [ -f "book/$relpath" ]; then
                  rm "book/$relpath"
                  echo "Removido: book/$relpath"
                fi
              done
            fi
          done

      - name: Move livros de '_rendered/' para 'book/'
        run: |
          echo "🚚 Movendo livros renderizados para a pasta book/..."
          for folder in $(ls _rendered 2>/dev/null); do
            mkdir -p "book/$folder"
            rsync -a --remove-source-files "_rendered/$folder/" "book/$folder/"
          done

      # - name: Gera índice dos livros (JSON)
      #   run: |
      #     echo "📋 Gerando índice de livros..."
      #     echo '{ "books": [' > book/books-index.json

      #     first=true
      #     for folder in $(ls book 2>/dev/null | grep -E '^[A-Z]{3}[0-9]{4}'); do
      #       if [ "$first" = true ]; then
      #         first=false
      #       else
      #         echo ',' >> book/books-index.json
      #       fi
      #       echo "  { \"id\": \"$folder\", \"path\": \"book/$folder/index.html\" }" >> book/books-index.json
      #     done

      #     echo ']}' >> book/books-index.json

      # ================================================
      # ================================================
      # Ao usar a ação 'peter-evans/create-pull-request' no GitHub Actions,
      # não é necessário criar manualmente um commit ou uma branch antes.
      # A própria ação faz tudo automaticamente:
      # - Cria uma branch nova (ex: books-render-20250927-123456)
      # - Adiciona e commita todas as mudanças feitas pelo workflow
      # - Cria a Pull Request dessa branch para
      # ================================================
      # ================================================

      - name: Cria Pull Request para branch padrão
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ env.TOKEN }}
          branch: book-$(date +%Y%m%d-%H%M%S)
          base: main # ou master, dependendo da sua branch padrão
          title: "books: atualiza books renderizados pelo GitHub Actions"
          labels: |
            books
            quarto
            action
            needs-review
            automated-pr
          assignees: ${{ github.repository_owner }}
          draft: false
          commit-message: |
            books: atualiza livros renderizados

            Livros processados:
            $(ls _rendered 2>/dev/null | sed 's/^/- /' || echo "- Nenhum")

            - Renderização Quarto → HTML
            - Índice JSON gerado automaticamente
            - Estrutura organizada em book/

            Commit fonte: ${{ github.sha }}
            Data: $(date +'%Y-%m-%d %H:%M:%S UTC')
          body: |
            ## 📖 Nova Renderização dos Livros Quarto

            Esta PR contém os livros atualizados renderizados a partir das mudanças aprovadas enviadas para a branch `main`.

            ### 📋 Detalhes da Renderização
            - **Commit fonte**: ${{ github.sha }}
            - **Workflow**: ${{ github.run_id }}
            - **Data**: $(date +'%Y-%m-%d %H:%M:%S UTC')
            - **Triggering commit**: ${{ github.event.head_commit.message }}

            ### 📚 Livros Renderizados
            $(ls _rendered 2>/dev/null | sed 's/^/- 📖 /' || echo "- Nenhum livro renderizado")

            ### 🔄 Mudanças Incluídas
            - ✅ Livros Quarto renderizados para HTML na pasta `book/`
            - ✅ Índice de livros atualizado (`book/books-index.json`)
            - ✅ Estrutura de arquivos organizada

            ### 📁 Estrutura Adicionada/Atualizada
            ```
            book/
            ├── livro1/
            ├── livro2/
            └── ...
            ```

            ### 📝 Arquivos Principais
            - `book/books-index.json` - Índice com metadata dos livros
            - `book/*/index.html` - Páginas principais dos livros
            - Assets e recursos complementares

            ---

            ## 👀 Review Checklist

            Por favor, verifique:
            - [ ] 📖 Livros foram renderizados corretamente
            - [ ] 🎨 Formatação e estilos estão adequados  
            - [ ] 🔗 Links internos funcionam
            - [ ] 📱 Layout é responsivo
            - [ ] 📋 Índice JSON está correto
            - [ ] 📁 Estrutura de pastas está organizada

            ---
            **⚠️ Esta PR requer aprovação manual do proprietário antes do merge.**

      - name: Adiciona comentário com instruções
        if: steps.create-pr.outputs.pull-request-number
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ env.TOKEN }}
          issue-number: ${{ steps.create-pr.outputs.pull-request-number }}
          body: |
            ## 🤖 Instruções Automáticas

            ### 📋 Status do Workflow
            ✅ Livros renderizados com sucesso  
            ✅ Pull Request criada  
            ⏳ **Aguardando sua aprovação**  

            ### 🔍 Como Revisar

            1. **Verifique os arquivos alterados** na aba "Files changed"
            2. **Teste os livros localmente** se necessário:
               ```bash
               git checkout update-books-$(date +%Y%m%d-%H%M%S)
               # Abra book/*/index.html no navegador
               ```
            3. **Aprove a PR** quando estiver satisfeito

            ### 📁 Arquivos Importantes
            - `books-index.json` - Metadata dos livros
            - Cada pasta de livro contém o HTML renderizado

            ---
            *Esta PR foi criada automaticamente e **requer sua aprovação** para merge.*

      - name: Limpa arquivos temporários
        run: |
          rm -rf _rendered
          echo "✅ Arquivos temporários removidos"

  # create-pr: usando artefato
          
  notificar-estatistica:
    needs: [render]
    environment:
      name: ENVIRONMENT
    runs-on: ubuntu-latest
    steps:
      - name: Dispara 'repository_dispatch' no estatistica
        uses: peter-evans/repository-dispatch@v3
        with:
          repository: ${{ env.USERNAME }}/estatistica
          token: ${{ env.TOKEN }}
          event-type: atualizar-books

      # Posteriormente: Talvez seja útil detectar os livros modificados e enviar como client-payload
      # client-payload: '{"livros": ["livro1", "livro2"]}'
