name: render-books
description: Renderiza livros Quarto e cria PR para revis√£o

on:
  push:
    branches: [main]
    paths: ["build/**/*.qmd", "build/**/*.yml", "build/*.bib"]
  workflow_dispatch:

permissions:
  contents: write
  actions: write

env:
  USERNAME: ${{ github.repository_owner }}
  USEREMAIL: ${{ secrets.USEREMAIL }}
  TOKEN: ${{ secrets.TOKEN_REPO_SYNC }}

jobs:
  render-and-create-pr:
    runs-on: ubuntu-latest
    outputs:
      pull-request-number: ${{ steps.create-pr.outputs.pull-request-number }}
    steps:
      - name: Checkout reposit√≥rio
        uses: actions/checkout@v4
        with:
          token: ${{ env.TOKEN }}
          fetch-depth: 0

      - name: Configura Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Cria diret√≥rio de renderiza√ß√£o
        run: |
          echo "üìÅ Criando diret√≥rio para livros renderizados..."
          mkdir -p _rendered
          echo "‚úÖ Diret√≥rio _rendered criado"

      - name: Lista livros v√°lidos
        id: list-books
        run: |
          echo "üîç Buscando livros com padr√£o [A-Z]{3}[0-9]{4}..."
          
          # Usa regex mais limpa no find
          book_list=$(find build -maxdepth 1 -type d -regex '.*/[A-Z]\{3\}[0-9]\{4\}

      - name: Prepara estrutura para Pull Request
        run: |
          echo "üîÑ Preparando arquivos para PR na branch principal..."
          
          # Cria/atualiza diret√≥rio book/ na pr√≥pria main
          echo "üîÑ Sincronizando livros renderizados na pasta book/..."
          
          # Remove vers√µes antigas apenas dos livros que foram re-renderizados
          # (livros que seguem o padr√£o [A-Z]{3}[0-9]{4})
          for folder in $(ls _rendered 2>/dev/null || echo ""); do
            # Verifica se o nome segue o padr√£o antes de remover
            if echo "$folder" | grep -qE '^[A-Z]{3}[0-9]{4}

      - name: Gera √≠ndice dos livros (JSON)
        run: |
          echo "üìã Gerando √≠ndice de livros..."
          echo '{
            "books": [' > book/books-index.json
          
          first=true
          # Processa apenas livros que seguem o padr√£o [A-Z]{3}[0-9]{4}
          for folder in $(ls book 2>/dev/null | grep -E '^[A-Z]{3}[0-9]{4}

      - name: Cria Pull Request para branch padr√£o
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ env.TOKEN }}
          branch: books-render-$(date +%Y%m%d-%H%M%S)
          base: main  # ou master, dependendo da sua branch padr√£o
          title: "üìö Atualiza√ß√£o dos livros renderizados - $(date +'%Y-%m-%d %H:%M')"
          body: |
            ## üìñ Nova Renderiza√ß√£o dos Livros Quarto
            
            Esta PR cont√©m os livros atualizados renderizados a partir das mudan√ßas na branch `main`.
            
            ### üìã Detalhes da Renderiza√ß√£o
            - **Commit fonte**: ${{ github.sha }}
            - **Workflow**: ${{ github.run_id }}
            - **Data**: $(date +'%Y-%m-%d %H:%M:%S UTC')
            - **Triggering commit**: ${{ github.event.head_commit.message }}
            
            ### üìö Livros Renderizados
            $(ls _rendered 2>/dev/null | sed 's/^/- üìñ /' || echo "- Nenhum livro renderizado")
            
            ### üîÑ Mudan√ßas Inclu√≠das
            - ‚úÖ Livros Quarto renderizados para HTML na pasta `book/`
            - ‚úÖ √çndice de livros atualizado (`book/books-index.json`)
            - ‚úÖ Estrutura de arquivos organizada
            
            ### üìÅ Estrutura Adicionada/Atualizada
            ```
            book/
            ‚îú‚îÄ‚îÄ books-index.json     ‚Üê √çndice com metadata
            ‚îú‚îÄ‚îÄ livro1/
            ‚îÇ   ‚îú‚îÄ‚îÄ index.html
            ‚îÇ   ‚îî‚îÄ‚îÄ assets/
            ‚îú‚îÄ‚îÄ livro2/
            ‚îÇ   ‚îú‚îÄ‚îÄ index.html
            ‚îÇ   ‚îî‚îÄ‚îÄ assets/
            ‚îî‚îÄ‚îÄ ...
            ```
            
            ### üìù Arquivos Principais
            - `book/books-index.json` - √çndice com metadata dos livros
            - `book/*/index.html` - P√°ginas principais dos livros
            - Assets e recursos complementares
            
            ---
            
            ## üëÄ Review Checklist
            
            Por favor, verifique:
            - [ ] üìñ Livros foram renderizados corretamente
            - [ ] üé® Formata√ß√£o e estilos est√£o adequados  
            - [ ] üîó Links internos funcionam
            - [ ] üì± Layout √© responsivo
            - [ ] üìã √çndice JSON est√° correto
            - [ ] üìÅ Estrutura de pastas est√° organizada
            
            ---
            **‚ö†Ô∏è Esta PR requer aprova√ß√£o manual do propriet√°rio antes do merge.**
          labels: |
            books-update
            quarto-render
            needs-review
            automated-pr
          assignees: ${{ github.repository_owner }}
          draft: false
          commit-message: |
            üìö Adiciona/Atualiza livros renderizados
            
            Livros processados:
            $(ls _rendered 2>/dev/null | sed 's/^/- /' || echo "- Nenhum")
            
            - Renderiza√ß√£o Quarto ‚Üí HTML
            - √çndice JSON gerado automaticamente
            - Estrutura organizada em book/
            
            Commit fonte: ${{ github.sha }}
            Data: $(date +'%Y-%m-%d %H:%M:%S UTC')

      - name: Adiciona coment√°rio com instru√ß√µes
        if: steps.create-pr.outputs.pull-request-number
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ env.TOKEN }}
          issue-number: ${{ steps.create-pr.outputs.pull-request-number }}
          body: |
            ## ü§ñ Instru√ß√µes Autom√°ticas
            
            ### üìã Status do Workflow
            ‚úÖ Livros renderizados com sucesso  
            ‚úÖ Pull Request criada  
            ‚è≥ **Aguardando sua aprova√ß√£o**  
            
            ### üîç Como Revisar
            
            1. **Verifique os arquivos alterados** na aba "Files changed"
            2. **Teste os livros localmente** se necess√°rio:
               ```bash
               git checkout update-books-$(date +%Y%m%d-%H%M%S)
               # Abra book/*/index.html no navegador
               ```
            3. **Aprove a PR** quando estiver satisfeito
            
            ### üìÅ Arquivos Importantes
            - `books-index.json` - Metadata dos livros
            - Cada pasta de livro cont√©m o HTML renderizado
            
            ---
            *Esta PR foi criada automaticamente e **requer sua aprova√ß√£o** para merge.*

      - name: Limpa arquivos tempor√°rios
        run: |
          rm -rf _rendered
          echo "‚úÖ Arquivos tempor√°rios removidos"

  summary:
    needs: [render-and-create-pr]
    runs-on: ubuntu-latest
    steps:
      - name: Resultado final
        run: |
          if [ "${{ needs.render-and-create-pr.outputs.pull-request-number }}" ]; then
            echo "üéâ Pipeline conclu√≠do com sucesso!"
            echo "üìã Pull Request criada: #${{ needs.render-and-create-pr.outputs.pull-request-number }}"
            echo "‚è≥ Aguardando aprova√ß√£o do propriet√°rio do reposit√≥rio"
            echo "üëÄ Revisar em: ${{ github.server_url }}/${{ github.repository }}/pull/${{ needs.render-and-create-pr.outputs.pull-request-number }}"
          else
            echo "‚ÑπÔ∏è  Nenhuma PR foi criada (possivelmente sem mudan√ßas)"
          fi; then
              if [ -d "book/$folder" ]; then
                echo "üóëÔ∏è  Removendo vers√£o antiga: $folder"
                rm -rf "book/$folder"
              else
                echo "üìö Novo livro detectado: $folder"
              fi
            else
              echo "‚ö†Ô∏è  Pasta $folder n√£o segue padr√£o [A-Z]{3}[0-9]{4} - ignorando"
            fi
          done
          
          # Move novos livros renderizados
          mkdir -p book
          if [ -d "_rendered" ] && [ "$(ls -A _rendered 2>/dev/null)" ]; then
            cp -r _rendered/* book/
            echo "‚úÖ Livros sincronizados em book/ com sucesso"
            
            # Lista livros sincronizados
            echo "üìã Livros sincronizados:"
            for book in $(ls book/ | grep -E '^[A-Z]{3}[0-9]{4}

      - name: Gera √≠ndice dos livros (JSON)
        run: |
          echo "üìã Gerando √≠ndice de livros..."
          echo '{
            "books": [' > book/books-index.json
          
          first=true
          for folder in $(ls book 2>/dev/null | grep -v "books-index.json" || echo ""); do
            if [ -d "book/$folder" ]; then
              if [ "$first" = false ]; then
                echo ',' >> book/books-index.json
              fi
              
              # Extrai t√≠tulo do index.html se existir
              title="$folder"
              if [ -f "book/$folder/index.html" ]; then
                extracted_title=$(grep -o '<title[^>]*>[^<]*' "book/$folder/index.html" | sed 's/<title[^>]*>//' | head -1)
                if [ ! -z "$extracted_title" ]; then
                  title="$extracted_title"
                fi
              fi
              
              echo "    {
                \"id\": \"$folder\",
                \"title\": \"$title\",
                \"path\": \"$folder/index.html\",
                \"updated\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
              }" >> book/books-index.json
              first=false
            fi
          done
          
          echo '
            ],
            "last_updated": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
          }' >> book/books-index.json
          
          echo "‚úÖ √çndice gerado: $(cat book/books-index.json | jq '.books | length') livros"

      - name: Cria Pull Request para branch padr√£o
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ env.TOKEN }}
          branch: books-render-$(date +%Y%m%d-%H%M%S)
          base: main  # ou master, dependendo da sua branch padr√£o
          title: "üìö Atualiza√ß√£o dos livros renderizados - $(date +'%Y-%m-%d %H:%M')"
          body: |
            ## üìñ Nova Renderiza√ß√£o dos Livros Quarto
            
            Esta PR cont√©m os livros atualizados renderizados a partir das mudan√ßas na branch `main`.
            
            ### üìã Detalhes da Renderiza√ß√£o
            - **Commit fonte**: ${{ github.sha }}
            - **Workflow**: ${{ github.run_id }}
            - **Data**: $(date +'%Y-%m-%d %H:%M:%S UTC')
            - **Triggering commit**: ${{ github.event.head_commit.message }}
            
            ### üìö Livros Renderizados
            $(ls _rendered 2>/dev/null | sed 's/^/- üìñ /' || echo "- Nenhum livro renderizado")
            
            ### üîÑ Mudan√ßas Inclu√≠das
            - ‚úÖ Livros Quarto renderizados para HTML na pasta `book/`
            - ‚úÖ √çndice de livros atualizado (`book/books-index.json`)
            - ‚úÖ Estrutura de arquivos organizada
            
            ### üìÅ Estrutura Adicionada/Atualizada
            ```
            book/
            ‚îú‚îÄ‚îÄ books-index.json     ‚Üê √çndice com metadata
            ‚îú‚îÄ‚îÄ livro1/
            ‚îÇ   ‚îú‚îÄ‚îÄ index.html
            ‚îÇ   ‚îî‚îÄ‚îÄ assets/
            ‚îú‚îÄ‚îÄ livro2/
            ‚îÇ   ‚îú‚îÄ‚îÄ index.html
            ‚îÇ   ‚îî‚îÄ‚îÄ assets/
            ‚îî‚îÄ‚îÄ ...
            ```
            
            ### üìù Arquivos Principais
            - `book/books-index.json` - √çndice com metadata dos livros
            - `book/*/index.html` - P√°ginas principais dos livros
            - Assets e recursos complementares
            
            ---
            
            ## üëÄ Review Checklist
            
            Por favor, verifique:
            - [ ] üìñ Livros foram renderizados corretamente
            - [ ] üé® Formata√ß√£o e estilos est√£o adequados  
            - [ ] üîó Links internos funcionam
            - [ ] üì± Layout √© responsivo
            - [ ] üìã √çndice JSON est√° correto
            - [ ] üìÅ Estrutura de pastas est√° organizada
            
            ---
            **‚ö†Ô∏è Esta PR requer aprova√ß√£o manual do propriet√°rio antes do merge.**
          labels: |
            books-update
            quarto-render
            needs-review
            automated-pr
          assignees: ${{ github.repository_owner }}
          draft: false
          commit-message: |
            üìö Adiciona/Atualiza livros renderizados
            
            Livros processados:
            $(ls _rendered 2>/dev/null | sed 's/^/- /' || echo "- Nenhum")
            
            - Renderiza√ß√£o Quarto ‚Üí HTML
            - √çndice JSON gerado automaticamente
            - Estrutura organizada em book/
            
            Commit fonte: ${{ github.sha }}
            Data: $(date +'%Y-%m-%d %H:%M:%S UTC')

      - name: Adiciona coment√°rio com instru√ß√µes
        if: steps.create-pr.outputs.pull-request-number
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ env.TOKEN }}
          issue-number: ${{ steps.create-pr.outputs.pull-request-number }}
          body: |
            ## ü§ñ Instru√ß√µes Autom√°ticas
            
            ### üìã Status do Workflow
            ‚úÖ Livros renderizados com sucesso  
            ‚úÖ Pull Request criada  
            ‚è≥ **Aguardando sua aprova√ß√£o**  
            
            ### üîç Como Revisar
            
            1. **Verifique os arquivos alterados** na aba "Files changed"
            2. **Teste os livros localmente** se necess√°rio:
               ```bash
               git checkout update-books-$(date +%Y%m%d-%H%M%S)
               # Abra book/*/index.html no navegador
               ```
            3. **Aprove a PR** quando estiver satisfeito
            
            ### üìÅ Arquivos Importantes
            - `books-index.json` - Metadata dos livros
            - Cada pasta de livro cont√©m o HTML renderizado
            
            ---
            *Esta PR foi criada automaticamente e **requer sua aprova√ß√£o** para merge.*

      - name: Limpa arquivos tempor√°rios
        run: |
          rm -rf _rendered
          echo "‚úÖ Arquivos tempor√°rios removidos"




# Extra do Cloude Sonnet
  # summary:
  #   needs: [render-and-create-pr]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Resultado final
  #       run: |
  #         if [ "${{ needs.render-and-create-pr.outputs.pull-request-number }}" ]; then
  #           echo "üéâ Pipeline conclu√≠do com sucesso!"
  #           echo "üìã Pull Request criada: #${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #           echo "‚è≥ Aguardando aprova√ß√£o do propriet√°rio do reposit√≥rio"
  #           echo "üëÄ Revisar em: ${{ github.server_url }}/${{ github.repository }}/pull/${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #         else
  #           echo "‚ÑπÔ∏è  Nenhuma PR foi criada (possivelmente sem mudan√ßas)"
  #         fi); do
  #             echo "   üìñ $book"
  #           done
  #         else
  #           echo "‚ö†Ô∏è  Nenhum livro foi renderizado"
  #           exit 1
  #         fi

  #     - name: Gera √≠ndice dos livros (JSON)
  #       run: |
  #         echo "üìã Gerando √≠ndice de livros..."
  #         echo '{
  #           "books": [' > book/books-index.json
          
  #         first=true
  #         for folder in $(ls book 2>/dev/null | grep -v "books-index.json" || echo ""); do
  #           if [ -d "book/$folder" ]; then
  #             if [ "$first" = false ]; then
  #               echo ',' >> book/books-index.json
  #             fi
              
  #             # Extrai t√≠tulo do index.html se existir
  #             title="$folder"
  #             if [ -f "book/$folder/index.html" ]; then
  #               extracted_title=$(grep -o '<title[^>]*>[^<]*' "book/$folder/index.html" | sed 's/<title[^>]*>//' | head -1)
  #               if [ ! -z "$extracted_title" ]; then
  #                 title="$extracted_title"
  #               fi
  #             fi
              
  #             echo "    {
  #               \"id\": \"$folder\",
  #               \"title\": \"$title\",
  #               \"path\": \"$folder/index.html\",
  #               \"updated\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
  #             }" >> book/books-index.json
  #             first=false
  #           fi
  #         done
          
  #         echo '
  #           ],
  #           "last_updated": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
  #         }' >> book/books-index.json
          
  #         echo "‚úÖ √çndice gerado: $(cat book/books-index.json | jq '.books | length') livros"

  #     - name: Cria Pull Request para branch padr√£o
  #       id: create-pr
  #       uses: peter-evans/create-pull-request@v5
  #       with:
  #         token: ${{ env.TOKEN }}
  #         branch: books-render-$(date +%Y%m%d-%H%M%S)
  #         base: main  # ou master, dependendo da sua branch padr√£o
  #         title: "üìö Atualiza√ß√£o dos livros renderizados - $(date +'%Y-%m-%d %H:%M')"
  #         body: |
  #           ## üìñ Nova Renderiza√ß√£o dos Livros Quarto
            
  #           Esta PR cont√©m os livros atualizados renderizados a partir das mudan√ßas na branch `main`.
            
  #           ### üìã Detalhes da Renderiza√ß√£o
  #           - **Commit fonte**: ${{ github.sha }}
  #           - **Workflow**: ${{ github.run_id }}
  #           - **Data**: $(date +'%Y-%m-%d %H:%M:%S UTC')
  #           - **Triggering commit**: ${{ github.event.head_commit.message }}
            
  #           ### üìö Livros Renderizados
  #           $(ls _rendered 2>/dev/null | sed 's/^/- üìñ /' || echo "- Nenhum livro renderizado")
            
  #           ### üîÑ Mudan√ßas Inclu√≠das
  #           - ‚úÖ Livros Quarto renderizados para HTML na pasta `book/`
  #           - ‚úÖ √çndice de livros atualizado (`book/books-index.json`)
  #           - ‚úÖ Estrutura de arquivos organizada
            
  #           ### üìÅ Estrutura Adicionada/Atualizada
  #           ```
  #           book/
  #           ‚îú‚îÄ‚îÄ books-index.json     ‚Üê √çndice com metadata
  #           ‚îú‚îÄ‚îÄ livro1/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îú‚îÄ‚îÄ livro2/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îî‚îÄ‚îÄ ...
  #           ```
            
  #           ### üìù Arquivos Principais
  #           - `book/books-index.json` - √çndice com metadata dos livros
  #           - `book/*/index.html` - P√°ginas principais dos livros
  #           - Assets e recursos complementares
            
  #           ---
            
  #           ## üëÄ Review Checklist
            
  #           Por favor, verifique:
  #           - [ ] üìñ Livros foram renderizados corretamente
  #           - [ ] üé® Formata√ß√£o e estilos est√£o adequados  
  #           - [ ] üîó Links internos funcionam
  #           - [ ] üì± Layout √© responsivo
  #           - [ ] üìã √çndice JSON est√° correto
  #           - [ ] üìÅ Estrutura de pastas est√° organizada
            
  #           ---
  #           **‚ö†Ô∏è Esta PR requer aprova√ß√£o manual do propriet√°rio antes do merge.**
  #         labels: |
  #           books-update
  #           quarto-render
  #           needs-review
  #           automated-pr
  #         assignees: ${{ github.repository_owner }}
  #         draft: false
  #         commit-message: |
  #           üìö Adiciona/Atualiza livros renderizados
            
  #           Livros processados:
  #           $(ls _rendered 2>/dev/null | sed 's/^/- /' || echo "- Nenhum")
            
  #           - Renderiza√ß√£o Quarto ‚Üí HTML
  #           - √çndice JSON gerado automaticamente
  #           - Estrutura organizada em book/
            
  #           Commit fonte: ${{ github.sha }}
  #           Data: $(date +'%Y-%m-%d %H:%M:%S UTC')

  #     - name: Adiciona coment√°rio com instru√ß√µes
  #       if: steps.create-pr.outputs.pull-request-number
  #       uses: peter-evans/create-or-update-comment@v3
  #       with:
  #         token: ${{ env.TOKEN }}
  #         issue-number: ${{ steps.create-pr.outputs.pull-request-number }}
  #         body: |
  #           ## ü§ñ Instru√ß√µes Autom√°ticas
            
  #           ### üìã Status do Workflow
  #           ‚úÖ Livros renderizados com sucesso  
  #           ‚úÖ Pull Request criada  
  #           ‚è≥ **Aguardando sua aprova√ß√£o**  
            
  #           ### üîç Como Revisar
            
  #           1. **Verifique os arquivos alterados** na aba "Files changed"
  #           2. **Teste os livros localmente** se necess√°rio:
  #              ```bash
  #              git checkout update-books-$(date +%Y%m%d-%H%M%S)
  #              # Abra book/*/index.html no navegador
  #              ```
  #           3. **Aprove a PR** quando estiver satisfeito
            
  #           ### üìÅ Arquivos Importantes
  #           - `books-index.json` - Metadata dos livros
  #           - Cada pasta de livro cont√©m o HTML renderizado
            
  #           ---
  #           *Esta PR foi criada automaticamente e **requer sua aprova√ß√£o** para merge.*

  #     - name: Limpa arquivos tempor√°rios
  #       run: |
  #         rm -rf _rendered
  #         echo "‚úÖ Arquivos tempor√°rios removidos"

  # summary:
  #   needs: [render-and-create-pr]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Resultado final
  #       run: |
  #         if [ "${{ needs.render-and-create-pr.outputs.pull-request-number }}" ]; then
  #           echo "üéâ Pipeline conclu√≠do com sucesso!"
  #           echo "üìã Pull Request criada: #${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #           echo "‚è≥ Aguardando aprova√ß√£o do propriet√°rio do reposit√≥rio"
  #           echo "üëÄ Revisar em: ${{ github.server_url }}/${{ github.repository }}/pull/${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #         else
  #           echo "‚ÑπÔ∏è  Nenhuma PR foi criada (possivelmente sem mudan√ßas)"
  #         fi | sort); do
  #           if [ -d "book/$folder" ]; then
  #             if [ "$first" = false ]; then
  #               echo ',' >> book/books-index.json
  #             fi
              
  #             # Extrai t√≠tulo do index.html se existir
  #             title="$folder"
  #             subject_code="${folder:0:3}"  # Primeiras 3 letras
  #             course_number="${folder:3:4}" # 4 n√∫meros
              
  #             if [ -f "book/$folder/index.html" ]; then
  #               extracted_title=$(grep -o '<title[^>]*>[^<]*' "book/$folder/index.html" | sed 's/<title[^>]*>//' | head -1)
  #               if [ ! -z "$extracted_title" ]; then
  #                 title="$extracted_title"
  #               fi
  #             fi
              
  #             echo "    {
  #               \"id\": \"$folder\",
  #               \"title\": \"$title\",
  #               \"subject_code\": \"$subject_code\",
  #               \"course_number\": \"$course_number\",
  #               \"path\": \"$folder/index.html\",
  #               \"updated\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
  #             }" >> book/books-index.json
  #             first=false
              
  #             echo "   üìñ Indexado: $folder ($title)"
  #           fi
  #         done
          
  #         echo '
  #           ],
  #           "last_updated": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
  #         }' >> book/books-index.json
          
  #         book_count=$(ls book 2>/dev/null | grep -E '^[A-Z]{3}[0-9]{4}

  #     - name: Cria Pull Request para branch padr√£o
  #       id: create-pr
  #       uses: peter-evans/create-pull-request@v5
  #       with:
  #         token: ${{ env.TOKEN }}
  #         branch: books-render-$(date +%Y%m%d-%H%M%S)
  #         base: main  # ou master, dependendo da sua branch padr√£o
  #         title: "üìö Atualiza√ß√£o dos livros renderizados - $(date +'%Y-%m-%d %H:%M')"
  #         body: |
  #           ## üìñ Nova Renderiza√ß√£o dos Livros Quarto
            
  #           Esta PR cont√©m os livros atualizados renderizados a partir das mudan√ßas na branch `main`.
            
  #           ### üìã Detalhes da Renderiza√ß√£o
  #           - **Commit fonte**: ${{ github.sha }}
  #           - **Workflow**: ${{ github.run_id }}
  #           - **Data**: $(date +'%Y-%m-%d %H:%M:%S UTC')
  #           - **Triggering commit**: ${{ github.event.head_commit.message }}
            
  #           ### üìö Livros Renderizados
  #           $(ls _rendered 2>/dev/null | sed 's/^/- üìñ /' || echo "- Nenhum livro renderizado")
            
  #           ### üîÑ Mudan√ßas Inclu√≠das
  #           - ‚úÖ Livros Quarto renderizados para HTML na pasta `book/`
  #           - ‚úÖ √çndice de livros atualizado (`book/books-index.json`)
  #           - ‚úÖ Estrutura de arquivos organizada
            
  #           ### üìÅ Estrutura Adicionada/Atualizada
  #           ```
  #           book/
  #           ‚îú‚îÄ‚îÄ books-index.json     ‚Üê √çndice com metadata
  #           ‚îú‚îÄ‚îÄ livro1/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îú‚îÄ‚îÄ livro2/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îî‚îÄ‚îÄ ...
  #           ```
            
  #           ### üìù Arquivos Principais
  #           - `book/books-index.json` - √çndice com metadata dos livros
  #           - `book/*/index.html` - P√°ginas principais dos livros
  #           - Assets e recursos complementares
            
  #           ---
            
  #           ## üëÄ Review Checklist
            
  #           Por favor, verifique:
  #           - [ ] üìñ Livros foram renderizados corretamente
  #           - [ ] üé® Formata√ß√£o e estilos est√£o adequados  
  #           - [ ] üîó Links internos funcionam
  #           - [ ] üì± Layout √© responsivo
  #           - [ ] üìã √çndice JSON est√° correto
  #           - [ ] üìÅ Estrutura de pastas est√° organizada
            
  #           ---
  #           **‚ö†Ô∏è Esta PR requer aprova√ß√£o manual do propriet√°rio antes do merge.**
  #         labels: |
  #           books-update
  #           quarto-render
  #           needs-review
  #           automated-pr
  #         assignees: ${{ github.repository_owner }}
  #         draft: false
  #         commit-message: |
  #           üìö Adiciona/Atualiza livros renderizados
            
  #           Livros processados:
  #           $(ls _rendered 2>/dev/null | sed 's/^/- /' || echo "- Nenhum")
            
  #           - Renderiza√ß√£o Quarto ‚Üí HTML
  #           - √çndice JSON gerado automaticamente
  #           - Estrutura organizada em book/
            
  #           Commit fonte: ${{ github.sha }}
  #           Data: $(date +'%Y-%m-%d %H:%M:%S UTC')

  #     - name: Adiciona coment√°rio com instru√ß√µes
  #       if: steps.create-pr.outputs.pull-request-number
  #       uses: peter-evans/create-or-update-comment@v3
  #       with:
  #         token: ${{ env.TOKEN }}
  #         issue-number: ${{ steps.create-pr.outputs.pull-request-number }}
  #         body: |
  #           ## ü§ñ Instru√ß√µes Autom√°ticas
            
  #           ### üìã Status do Workflow
  #           ‚úÖ Livros renderizados com sucesso  
  #           ‚úÖ Pull Request criada  
  #           ‚è≥ **Aguardando sua aprova√ß√£o**  
            
  #           ### üîç Como Revisar
            
  #           1. **Verifique os arquivos alterados** na aba "Files changed"
  #           2. **Teste os livros localmente** se necess√°rio:
  #              ```bash
  #              git checkout update-books-$(date +%Y%m%d-%H%M%S)
  #              # Abra book/*/index.html no navegador
  #              ```
  #           3. **Aprove a PR** quando estiver satisfeito
            
  #           ### üìÅ Arquivos Importantes
  #           - `books-index.json` - Metadata dos livros
  #           - Cada pasta de livro cont√©m o HTML renderizado
            
  #           ---
  #           *Esta PR foi criada automaticamente e **requer sua aprova√ß√£o** para merge.*

  #     - name: Limpa arquivos tempor√°rios
  #       run: |
  #         rm -rf _rendered
  #         echo "‚úÖ Arquivos tempor√°rios removidos"

  # summary:
  #   needs: [render-and-create-pr]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Resultado final
  #       run: |
  #         if [ "${{ needs.render-and-create-pr.outputs.pull-request-number }}" ]; then
  #           echo "üéâ Pipeline conclu√≠do com sucesso!"
  #           echo "üìã Pull Request criada: #${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #           echo "‚è≥ Aguardando aprova√ß√£o do propriet√°rio do reposit√≥rio"
  #           echo "üëÄ Revisar em: ${{ github.server_url }}/${{ github.repository }}/pull/${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #         else
  #           echo "‚ÑπÔ∏è  Nenhuma PR foi criada (possivelmente sem mudan√ßas)"
  #         fi; then
  #             if [ -d "book/$folder" ]; then
  #               echo "üóëÔ∏è  Removendo vers√£o antiga: $folder"
  #               rm -rf "book/$folder"
  #             else
  #               echo "üìö Novo livro detectado: $folder"
  #             fi
  #           else
  #             echo "‚ö†Ô∏è  Pasta $folder n√£o segue padr√£o [A-Z]{3}[0-9]{4} - ignorando"
  #           fi
  #         done
          
  #         # Move novos livros renderizados
  #         mkdir -p book
  #         if [ -d "_rendered" ] && [ "$(ls -A _rendered 2>/dev/null)" ]; then
  #           cp -r _rendered/* book/
  #           echo "‚úÖ Livros sincronizados em book/ com sucesso"
            
  #           # Lista livros sincronizados
  #           echo "üìã Livros sincronizados:"
  #           for book in $(ls book/ | grep -E '^[A-Z]{3}[0-9]{4}

  #     - name: Gera √≠ndice dos livros (JSON)
  #       run: |
  #         echo "üìã Gerando √≠ndice de livros..."
  #         echo '{
  #           "books": [' > book/books-index.json
          
  #         first=true
  #         for folder in $(ls book 2>/dev/null | grep -v "books-index.json" || echo ""); do
  #           if [ -d "book/$folder" ]; then
  #             if [ "$first" = false ]; then
  #               echo ',' >> book/books-index.json
  #             fi
              
  #             # Extrai t√≠tulo do index.html se existir
  #             title="$folder"
  #             if [ -f "book/$folder/index.html" ]; then
  #               extracted_title=$(grep -o '<title[^>]*>[^<]*' "book/$folder/index.html" | sed 's/<title[^>]*>//' | head -1)
  #               if [ ! -z "$extracted_title" ]; then
  #                 title="$extracted_title"
  #               fi
  #             fi
              
  #             echo "    {
  #               \"id\": \"$folder\",
  #               \"title\": \"$title\",
  #               \"path\": \"$folder/index.html\",
  #               \"updated\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
  #             }" >> book/books-index.json
  #             first=false
  #           fi
  #         done
          
  #         echo '
  #           ],
  #           "last_updated": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
  #         }' >> book/books-index.json
          
  #         echo "‚úÖ √çndice gerado: $(cat book/books-index.json | jq '.books | length') livros"

  #     - name: Cria Pull Request para branch padr√£o
  #       id: create-pr
  #       uses: peter-evans/create-pull-request@v5
  #       with:
  #         token: ${{ env.TOKEN }}
  #         branch: books-render-$(date +%Y%m%d-%H%M%S)
  #         base: main  # ou master, dependendo da sua branch padr√£o
  #         title: "üìö Atualiza√ß√£o dos livros renderizados - $(date +'%Y-%m-%d %H:%M')"
  #         body: |
  #           ## üìñ Nova Renderiza√ß√£o dos Livros Quarto
            
  #           Esta PR cont√©m os livros atualizados renderizados a partir das mudan√ßas na branch `main`.
            
  #           ### üìã Detalhes da Renderiza√ß√£o
  #           - **Commit fonte**: ${{ github.sha }}
  #           - **Workflow**: ${{ github.run_id }}
  #           - **Data**: $(date +'%Y-%m-%d %H:%M:%S UTC')
  #           - **Triggering commit**: ${{ github.event.head_commit.message }}
            
  #           ### üìö Livros Renderizados
  #           $(ls _rendered 2>/dev/null | sed 's/^/- üìñ /' || echo "- Nenhum livro renderizado")
            
  #           ### üîÑ Mudan√ßas Inclu√≠das
  #           - ‚úÖ Livros Quarto renderizados para HTML na pasta `book/`
  #           - ‚úÖ √çndice de livros atualizado (`book/books-index.json`)
  #           - ‚úÖ Estrutura de arquivos organizada
            
  #           ### üìÅ Estrutura Adicionada/Atualizada
  #           ```
  #           book/
  #           ‚îú‚îÄ‚îÄ books-index.json     ‚Üê √çndice com metadata
  #           ‚îú‚îÄ‚îÄ livro1/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îú‚îÄ‚îÄ livro2/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îî‚îÄ‚îÄ ...
  #           ```
            
  #           ### üìù Arquivos Principais
  #           - `book/books-index.json` - √çndice com metadata dos livros
  #           - `book/*/index.html` - P√°ginas principais dos livros
  #           - Assets e recursos complementares
            
  #           ---
            
  #           ## üëÄ Review Checklist
            
  #           Por favor, verifique:
  #           - [ ] üìñ Livros foram renderizados corretamente
  #           - [ ] üé® Formata√ß√£o e estilos est√£o adequados  
  #           - [ ] üîó Links internos funcionam
  #           - [ ] üì± Layout √© responsivo
  #           - [ ] üìã √çndice JSON est√° correto
  #           - [ ] üìÅ Estrutura de pastas est√° organizada
            
  #           ---
  #           **‚ö†Ô∏è Esta PR requer aprova√ß√£o manual do propriet√°rio antes do merge.**
  #         labels: |
  #           books-update
  #           quarto-render
  #           needs-review
  #           automated-pr
  #         assignees: ${{ github.repository_owner }}
  #         draft: false
  #         commit-message: |
  #           üìö Adiciona/Atualiza livros renderizados
            
  #           Livros processados:
  #           $(ls _rendered 2>/dev/null | sed 's/^/- /' || echo "- Nenhum")
            
  #           - Renderiza√ß√£o Quarto ‚Üí HTML
  #           - √çndice JSON gerado automaticamente
  #           - Estrutura organizada em book/
            
  #           Commit fonte: ${{ github.sha }}
  #           Data: $(date +'%Y-%m-%d %H:%M:%S UTC')

  #     - name: Adiciona coment√°rio com instru√ß√µes
  #       if: steps.create-pr.outputs.pull-request-number
  #       uses: peter-evans/create-or-update-comment@v3
  #       with:
  #         token: ${{ env.TOKEN }}
  #         issue-number: ${{ steps.create-pr.outputs.pull-request-number }}
  #         body: |
  #           ## ü§ñ Instru√ß√µes Autom√°ticas
            
  #           ### üìã Status do Workflow
  #           ‚úÖ Livros renderizados com sucesso  
  #           ‚úÖ Pull Request criada  
  #           ‚è≥ **Aguardando sua aprova√ß√£o**  
            
  #           ### üîç Como Revisar
            
  #           1. **Verifique os arquivos alterados** na aba "Files changed"
  #           2. **Teste os livros localmente** se necess√°rio:
  #              ```bash
  #              git checkout update-books-$(date +%Y%m%d-%H%M%S)
  #              # Abra book/*/index.html no navegador
  #              ```
  #           3. **Aprove a PR** quando estiver satisfeito
            
  #           ### üìÅ Arquivos Importantes
  #           - `books-index.json` - Metadata dos livros
  #           - Cada pasta de livro cont√©m o HTML renderizado
            
  #           ---
  #           *Esta PR foi criada automaticamente e **requer sua aprova√ß√£o** para merge.*

  #     - name: Limpa arquivos tempor√°rios
  #       run: |
  #         rm -rf _rendered
  #         echo "‚úÖ Arquivos tempor√°rios removidos"

  # summary:
  #   needs: [render-and-create-pr]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Resultado final
  #       run: |
  #         if [ "${{ needs.render-and-create-pr.outputs.pull-request-number }}" ]; then
  #           echo "üéâ Pipeline conclu√≠do com sucesso!"
  #           echo "üìã Pull Request criada: #${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #           echo "‚è≥ Aguardando aprova√ß√£o do propriet√°rio do reposit√≥rio"
  #           echo "üëÄ Revisar em: ${{ github.server_url }}/${{ github.repository }}/pull/${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #         else
  #           echo "‚ÑπÔ∏è  Nenhuma PR foi criada (possivelmente sem mudan√ßas)"
  #         fi); do
  #             echo "   üìñ $book"
  #           done
  #         else
  #           echo "‚ö†Ô∏è  Nenhum livro foi renderizado"
  #           exit 1
  #         fi

  #     - name: Gera √≠ndice dos livros (JSON)
  #       run: |
  #         echo "üìã Gerando √≠ndice de livros..."
  #         echo '{
  #           "books": [' > book/books-index.json
          
  #         first=true
  #         for folder in $(ls book 2>/dev/null | grep -v "books-index.json" || echo ""); do
  #           if [ -d "book/$folder" ]; then
  #             if [ "$first" = false ]; then
  #               echo ',' >> book/books-index.json
  #             fi
              
  #             # Extrai t√≠tulo do index.html se existir
  #             title="$folder"
  #             if [ -f "book/$folder/index.html" ]; then
  #               extracted_title=$(grep -o '<title[^>]*>[^<]*' "book/$folder/index.html" | sed 's/<title[^>]*>//' | head -1)
  #               if [ ! -z "$extracted_title" ]; then
  #                 title="$extracted_title"
  #               fi
  #             fi
              
  #             echo "    {
  #               \"id\": \"$folder\",
  #               \"title\": \"$title\",
  #               \"path\": \"$folder/index.html\",
  #               \"updated\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
  #             }" >> book/books-index.json
  #             first=false
  #           fi
  #         done
          
  #         echo '
  #           ],
  #           "last_updated": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
  #         }' >> book/books-index.json
          
  #         echo "‚úÖ √çndice gerado: $(cat book/books-index.json | jq '.books | length') livros"

  #     - name: Cria Pull Request para branch padr√£o
  #       id: create-pr
  #       uses: peter-evans/create-pull-request@v5
  #       with:
  #         token: ${{ env.TOKEN }}
  #         branch: books-render-$(date +%Y%m%d-%H%M%S)
  #         base: main  # ou master, dependendo da sua branch padr√£o
  #         title: "üìö Atualiza√ß√£o dos livros renderizados - $(date +'%Y-%m-%d %H:%M')"
  #         body: |
  #           ## üìñ Nova Renderiza√ß√£o dos Livros Quarto
            
  #           Esta PR cont√©m os livros atualizados renderizados a partir das mudan√ßas na branch `main`.
            
  #           ### üìã Detalhes da Renderiza√ß√£o
  #           - **Commit fonte**: ${{ github.sha }}
  #           - **Workflow**: ${{ github.run_id }}
  #           - **Data**: $(date +'%Y-%m-%d %H:%M:%S UTC')
  #           - **Triggering commit**: ${{ github.event.head_commit.message }}
            
  #           ### üìö Livros Renderizados
  #           $(ls _rendered 2>/dev/null | sed 's/^/- üìñ /' || echo "- Nenhum livro renderizado")
            
  #           ### üîÑ Mudan√ßas Inclu√≠das
  #           - ‚úÖ Livros Quarto renderizados para HTML na pasta `book/`
  #           - ‚úÖ √çndice de livros atualizado (`book/books-index.json`)
  #           - ‚úÖ Estrutura de arquivos organizada
            
  #           ### üìÅ Estrutura Adicionada/Atualizada
  #           ```
  #           book/
  #           ‚îú‚îÄ‚îÄ books-index.json     ‚Üê √çndice com metadata
  #           ‚îú‚îÄ‚îÄ livro1/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îú‚îÄ‚îÄ livro2/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îî‚îÄ‚îÄ ...
  #           ```
            
  #           ### üìù Arquivos Principais
  #           - `book/books-index.json` - √çndice com metadata dos livros
  #           - `book/*/index.html` - P√°ginas principais dos livros
  #           - Assets e recursos complementares
            
  #           ---
            
  #           ## üëÄ Review Checklist
            
  #           Por favor, verifique:
  #           - [ ] üìñ Livros foram renderizados corretamente
  #           - [ ] üé® Formata√ß√£o e estilos est√£o adequados  
  #           - [ ] üîó Links internos funcionam
  #           - [ ] üì± Layout √© responsivo
  #           - [ ] üìã √çndice JSON est√° correto
  #           - [ ] üìÅ Estrutura de pastas est√° organizada
            
  #           ---
  #           **‚ö†Ô∏è Esta PR requer aprova√ß√£o manual do propriet√°rio antes do merge.**
  #         labels: |
  #           books-update
  #           quarto-render
  #           needs-review
  #           automated-pr
  #         assignees: ${{ github.repository_owner }}
  #         draft: false
  #         commit-message: |
  #           üìö Adiciona/Atualiza livros renderizados
            
  #           Livros processados:
  #           $(ls _rendered 2>/dev/null | sed 's/^/- /' || echo "- Nenhum")
            
  #           - Renderiza√ß√£o Quarto ‚Üí HTML
  #           - √çndice JSON gerado automaticamente
  #           - Estrutura organizada em book/
            
  #           Commit fonte: ${{ github.sha }}
  #           Data: $(date +'%Y-%m-%d %H:%M:%S UTC')

  #     - name: Adiciona coment√°rio com instru√ß√µes
  #       if: steps.create-pr.outputs.pull-request-number
  #       uses: peter-evans/create-or-update-comment@v3
  #       with:
  #         token: ${{ env.TOKEN }}
  #         issue-number: ${{ steps.create-pr.outputs.pull-request-number }}
  #         body: |
  #           ## ü§ñ Instru√ß√µes Autom√°ticas
            
  #           ### üìã Status do Workflow
  #           ‚úÖ Livros renderizados com sucesso  
  #           ‚úÖ Pull Request criada  
  #           ‚è≥ **Aguardando sua aprova√ß√£o**  
            
  #           ### üîç Como Revisar
            
  #           1. **Verifique os arquivos alterados** na aba "Files changed"
  #           2. **Teste os livros localmente** se necess√°rio:
  #              ```bash
  #              git checkout update-books-$(date +%Y%m%d-%H%M%S)
  #              # Abra book/*/index.html no navegador
  #              ```
  #           3. **Aprove a PR** quando estiver satisfeito
            
  #           ### üìÅ Arquivos Importantes
  #           - `books-index.json` - Metadata dos livros
  #           - Cada pasta de livro cont√©m o HTML renderizado
            
  #           ---
  #           *Esta PR foi criada automaticamente e **requer sua aprova√ß√£o** para merge.*

  #     - name: Limpa arquivos tempor√°rios
  #       run: |
  #         rm -rf _rendered
  #         echo "‚úÖ Arquivos tempor√°rios removidos"

  # summary:
  #   needs: [render-and-create-pr]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Resultado final
  #       run: |
  #         if [ "${{ needs.render-and-create-pr.outputs.pull-request-number }}" ]; then
  #           echo "üéâ Pipeline conclu√≠do com sucesso!"
  #           echo "üìã Pull Request criada: #${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #           echo "‚è≥ Aguardando aprova√ß√£o do propriet√°rio do reposit√≥rio"
  #           echo "üëÄ Revisar em: ${{ github.server_url }}/${{ github.repository }}/pull/${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #         else
  #           echo "‚ÑπÔ∏è  Nenhuma PR foi criada (possivelmente sem mudan√ßas)"
  #         fi | wc -l)
  #         echo "‚úÖ √çndice gerado com $book_count livros"

  #     - name: Cria Pull Request para branch padr√£o
  #       id: create-pr
  #       uses: peter-evans/create-pull-request@v5
  #       with:
  #         token: ${{ env.TOKEN }}
  #         branch: books-render-$(date +%Y%m%d-%H%M%S)
  #         base: main  # ou master, dependendo da sua branch padr√£o
  #         title: "üìö Atualiza√ß√£o dos livros renderizados - $(date +'%Y-%m-%d %H:%M')"
  #         body: |
  #           ## üìñ Nova Renderiza√ß√£o dos Livros Quarto
            
  #           Esta PR cont√©m os livros atualizados renderizados a partir das mudan√ßas na branch `main`.
            
  #           ### üìã Detalhes da Renderiza√ß√£o
  #           - **Commit fonte**: ${{ github.sha }}
  #           - **Workflow**: ${{ github.run_id }}
  #           - **Data**: $(date +'%Y-%m-%d %H:%M:%S UTC')
  #           - **Triggering commit**: ${{ github.event.head_commit.message }}
            
  #           ### üìö Livros Renderizados
  #           $(ls _rendered 2>/dev/null | sed 's/^/- üìñ /' || echo "- Nenhum livro renderizado")
            
  #           ### üîÑ Mudan√ßas Inclu√≠das
  #           - ‚úÖ Livros Quarto renderizados para HTML na pasta `book/`
  #           - ‚úÖ √çndice de livros atualizado (`book/books-index.json`)
  #           - ‚úÖ Estrutura de arquivos organizada
            
  #           ### üìÅ Estrutura Adicionada/Atualizada
  #           ```
  #           book/
  #           ‚îú‚îÄ‚îÄ books-index.json     ‚Üê √çndice com metadata
  #           ‚îú‚îÄ‚îÄ livro1/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îú‚îÄ‚îÄ livro2/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îî‚îÄ‚îÄ ...
  #           ```
            
  #           ### üìù Arquivos Principais
  #           - `book/books-index.json` - √çndice com metadata dos livros
  #           - `book/*/index.html` - P√°ginas principais dos livros
  #           - Assets e recursos complementares
            
  #           ---
            
  #           ## üëÄ Review Checklist
            
  #           Por favor, verifique:
  #           - [ ] üìñ Livros foram renderizados corretamente
  #           - [ ] üé® Formata√ß√£o e estilos est√£o adequados  
  #           - [ ] üîó Links internos funcionam
  #           - [ ] üì± Layout √© responsivo
  #           - [ ] üìã √çndice JSON est√° correto
  #           - [ ] üìÅ Estrutura de pastas est√° organizada
            
  #           ---
  #           **‚ö†Ô∏è Esta PR requer aprova√ß√£o manual do propriet√°rio antes do merge.**
  #         labels: |
  #           books-update
  #           quarto-render
  #           needs-review
  #           automated-pr
  #         assignees: ${{ github.repository_owner }}
  #         draft: false
  #         commit-message: |
  #           üìö Adiciona/Atualiza livros renderizados
            
  #           Livros processados:
  #           $(ls _rendered 2>/dev/null | sed 's/^/- /' || echo "- Nenhum")
            
  #           - Renderiza√ß√£o Quarto ‚Üí HTML
  #           - √çndice JSON gerado automaticamente
  #           - Estrutura organizada em book/
            
  #           Commit fonte: ${{ github.sha }}
  #           Data: $(date +'%Y-%m-%d %H:%M:%S UTC')

  #     - name: Adiciona coment√°rio com instru√ß√µes
  #       if: steps.create-pr.outputs.pull-request-number
  #       uses: peter-evans/create-or-update-comment@v3
  #       with:
  #         token: ${{ env.TOKEN }}
  #         issue-number: ${{ steps.create-pr.outputs.pull-request-number }}
  #         body: |
  #           ## ü§ñ Instru√ß√µes Autom√°ticas
            
  #           ### üìã Status do Workflow
  #           ‚úÖ Livros renderizados com sucesso  
  #           ‚úÖ Pull Request criada  
  #           ‚è≥ **Aguardando sua aprova√ß√£o**  
            
  #           ### üîç Como Revisar
            
  #           1. **Verifique os arquivos alterados** na aba "Files changed"
  #           2. **Teste os livros localmente** se necess√°rio:
  #              ```bash
  #              git checkout update-books-$(date +%Y%m%d-%H%M%S)
  #              # Abra book/*/index.html no navegador
  #              ```
  #           3. **Aprove a PR** quando estiver satisfeito
            
  #           ### üìÅ Arquivos Importantes
  #           - `books-index.json` - Metadata dos livros
  #           - Cada pasta de livro cont√©m o HTML renderizado
            
  #           ---
  #           *Esta PR foi criada automaticamente e **requer sua aprova√ß√£o** para merge.*

  #     - name: Limpa arquivos tempor√°rios
  #       run: |
  #         rm -rf _rendered
  #         echo "‚úÖ Arquivos tempor√°rios removidos"

  # summary:
  #   needs: [render-and-create-pr]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Resultado final
  #       run: |
  #         if [ "${{ needs.render-and-create-pr.outputs.pull-request-number }}" ]; then
  #           echo "üéâ Pipeline conclu√≠do com sucesso!"
  #           echo "üìã Pull Request criada: #${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #           echo "‚è≥ Aguardando aprova√ß√£o do propriet√°rio do reposit√≥rio"
  #           echo "üëÄ Revisar em: ${{ github.server_url }}/${{ github.repository }}/pull/${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #         else
  #           echo "‚ÑπÔ∏è  Nenhuma PR foi criada (possivelmente sem mudan√ßas)"
  #         fi; then
  #             if [ -d "book/$folder" ]; then
  #               echo "üóëÔ∏è  Removendo vers√£o antiga: $folder"
  #               rm -rf "book/$folder"
  #             else
  #               echo "üìö Novo livro detectado: $folder"
  #             fi
  #           else
  #             echo "‚ö†Ô∏è  Pasta $folder n√£o segue padr√£o [A-Z]{3}[0-9]{4} - ignorando"
  #           fi
  #         done
          
  #         # Move novos livros renderizados
  #         mkdir -p book
  #         if [ -d "_rendered" ] && [ "$(ls -A _rendered 2>/dev/null)" ]; then
  #           cp -r _rendered/* book/
  #           echo "‚úÖ Livros sincronizados em book/ com sucesso"
            
  #           # Lista livros sincronizados
  #           echo "üìã Livros sincronizados:"
  #           for book in $(ls book/ | grep -E '^[A-Z]{3}[0-9]{4}

  #     - name: Gera √≠ndice dos livros (JSON)
  #       run: |
  #         echo "üìã Gerando √≠ndice de livros..."
  #         echo '{
  #           "books": [' > book/books-index.json
          
  #         first=true
  #         for folder in $(ls book 2>/dev/null | grep -v "books-index.json" || echo ""); do
  #           if [ -d "book/$folder" ]; then
  #             if [ "$first" = false ]; then
  #               echo ',' >> book/books-index.json
  #             fi
              
  #             # Extrai t√≠tulo do index.html se existir
  #             title="$folder"
  #             if [ -f "book/$folder/index.html" ]; then
  #               extracted_title=$(grep -o '<title[^>]*>[^<]*' "book/$folder/index.html" | sed 's/<title[^>]*>//' | head -1)
  #               if [ ! -z "$extracted_title" ]; then
  #                 title="$extracted_title"
  #               fi
  #             fi
              
  #             echo "    {
  #               \"id\": \"$folder\",
  #               \"title\": \"$title\",
  #               \"path\": \"$folder/index.html\",
  #               \"updated\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
  #             }" >> book/books-index.json
  #             first=false
  #           fi
  #         done
          
  #         echo '
  #           ],
  #           "last_updated": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
  #         }' >> book/books-index.json
          
  #         echo "‚úÖ √çndice gerado: $(cat book/books-index.json | jq '.books | length') livros"

  #     - name: Cria Pull Request para branch padr√£o
  #       id: create-pr
  #       uses: peter-evans/create-pull-request@v5
  #       with:
  #         token: ${{ env.TOKEN }}
  #         branch: books-render-$(date +%Y%m%d-%H%M%S)
  #         base: main  # ou master, dependendo da sua branch padr√£o
  #         title: "üìö Atualiza√ß√£o dos livros renderizados - $(date +'%Y-%m-%d %H:%M')"
  #         body: |
  #           ## üìñ Nova Renderiza√ß√£o dos Livros Quarto
            
  #           Esta PR cont√©m os livros atualizados renderizados a partir das mudan√ßas na branch `main`.
            
  #           ### üìã Detalhes da Renderiza√ß√£o
  #           - **Commit fonte**: ${{ github.sha }}
  #           - **Workflow**: ${{ github.run_id }}
  #           - **Data**: $(date +'%Y-%m-%d %H:%M:%S UTC')
  #           - **Triggering commit**: ${{ github.event.head_commit.message }}
            
  #           ### üìö Livros Renderizados
  #           $(ls _rendered 2>/dev/null | sed 's/^/- üìñ /' || echo "- Nenhum livro renderizado")
            
  #           ### üîÑ Mudan√ßas Inclu√≠das
  #           - ‚úÖ Livros Quarto renderizados para HTML na pasta `book/`
  #           - ‚úÖ √çndice de livros atualizado (`book/books-index.json`)
  #           - ‚úÖ Estrutura de arquivos organizada
            
  #           ### üìÅ Estrutura Adicionada/Atualizada
  #           ```
  #           book/
  #           ‚îú‚îÄ‚îÄ books-index.json     ‚Üê √çndice com metadata
  #           ‚îú‚îÄ‚îÄ livro1/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îú‚îÄ‚îÄ livro2/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îî‚îÄ‚îÄ ...
  #           ```
            
  #           ### üìù Arquivos Principais
  #           - `book/books-index.json` - √çndice com metadata dos livros
  #           - `book/*/index.html` - P√°ginas principais dos livros
  #           - Assets e recursos complementares
            
  #           ---
            
  #           ## üëÄ Review Checklist
            
  #           Por favor, verifique:
  #           - [ ] üìñ Livros foram renderizados corretamente
  #           - [ ] üé® Formata√ß√£o e estilos est√£o adequados  
  #           - [ ] üîó Links internos funcionam
  #           - [ ] üì± Layout √© responsivo
  #           - [ ] üìã √çndice JSON est√° correto
  #           - [ ] üìÅ Estrutura de pastas est√° organizada
            
  #           ---
  #           **‚ö†Ô∏è Esta PR requer aprova√ß√£o manual do propriet√°rio antes do merge.**
  #         labels: |
  #           books-update
  #           quarto-render
  #           needs-review
  #           automated-pr
  #         assignees: ${{ github.repository_owner }}
  #         draft: false
  #         commit-message: |
  #           üìö Adiciona/Atualiza livros renderizados
            
  #           Livros processados:
  #           $(ls _rendered 2>/dev/null | sed 's/^/- /' || echo "- Nenhum")
            
  #           - Renderiza√ß√£o Quarto ‚Üí HTML
  #           - √çndice JSON gerado automaticamente
  #           - Estrutura organizada em book/
            
  #           Commit fonte: ${{ github.sha }}
  #           Data: $(date +'%Y-%m-%d %H:%M:%S UTC')

  #     - name: Adiciona coment√°rio com instru√ß√µes
  #       if: steps.create-pr.outputs.pull-request-number
  #       uses: peter-evans/create-or-update-comment@v3
  #       with:
  #         token: ${{ env.TOKEN }}
  #         issue-number: ${{ steps.create-pr.outputs.pull-request-number }}
  #         body: |
  #           ## ü§ñ Instru√ß√µes Autom√°ticas
            
  #           ### üìã Status do Workflow
  #           ‚úÖ Livros renderizados com sucesso  
  #           ‚úÖ Pull Request criada  
  #           ‚è≥ **Aguardando sua aprova√ß√£o**  
            
  #           ### üîç Como Revisar
            
  #           1. **Verifique os arquivos alterados** na aba "Files changed"
  #           2. **Teste os livros localmente** se necess√°rio:
  #              ```bash
  #              git checkout update-books-$(date +%Y%m%d-%H%M%S)
  #              # Abra book/*/index.html no navegador
  #              ```
  #           3. **Aprove a PR** quando estiver satisfeito
            
  #           ### üìÅ Arquivos Importantes
  #           - `books-index.json` - Metadata dos livros
  #           - Cada pasta de livro cont√©m o HTML renderizado
            
  #           ---
  #           *Esta PR foi criada automaticamente e **requer sua aprova√ß√£o** para merge.*

  #     - name: Limpa arquivos tempor√°rios
  #       run: |
  #         rm -rf _rendered
  #         echo "‚úÖ Arquivos tempor√°rios removidos"

  # summary:
  #   needs: [render-and-create-pr]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Resultado final
  #       run: |
  #         if [ "${{ needs.render-and-create-pr.outputs.pull-request-number }}" ]; then
  #           echo "üéâ Pipeline conclu√≠do com sucesso!"
  #           echo "üìã Pull Request criada: #${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #           echo "‚è≥ Aguardando aprova√ß√£o do propriet√°rio do reposit√≥rio"
  #           echo "üëÄ Revisar em: ${{ github.server_url }}/${{ github.repository }}/pull/${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #         else
  #           echo "‚ÑπÔ∏è  Nenhuma PR foi criada (possivelmente sem mudan√ßas)"
  #         fi); do
  #             echo "   üìñ $book"
  #           done
  #         else
  #           echo "‚ö†Ô∏è  Nenhum livro foi renderizado"
  #           exit 1
  #         fi

  #     - name: Gera √≠ndice dos livros (JSON)
  #       run: |
  #         echo "üìã Gerando √≠ndice de livros..."
  #         echo '{
  #           "books": [' > book/books-index.json
          
  #         first=true
  #         for folder in $(ls book 2>/dev/null | grep -v "books-index.json" || echo ""); do
  #           if [ -d "book/$folder" ]; then
  #             if [ "$first" = false ]; then
  #               echo ',' >> book/books-index.json
  #             fi
              
  #             # Extrai t√≠tulo do index.html se existir
  #             title="$folder"
  #             if [ -f "book/$folder/index.html" ]; then
  #               extracted_title=$(grep -o '<title[^>]*>[^<]*' "book/$folder/index.html" | sed 's/<title[^>]*>//' | head -1)
  #               if [ ! -z "$extracted_title" ]; then
  #                 title="$extracted_title"
  #               fi
  #             fi
              
  #             echo "    {
  #               \"id\": \"$folder\",
  #               \"title\": \"$title\",
  #               \"path\": \"$folder/index.html\",
  #               \"updated\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
  #             }" >> book/books-index.json
  #             first=false
  #           fi
  #         done
          
  #         echo '
  #           ],
  #           "last_updated": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
  #         }' >> book/books-index.json
          
  #         echo "‚úÖ √çndice gerado: $(cat book/books-index.json | jq '.books | length') livros"

  #     - name: Cria Pull Request para branch padr√£o
  #       id: create-pr
  #       uses: peter-evans/create-pull-request@v5
  #       with:
  #         token: ${{ env.TOKEN }}
  #         branch: books-render-$(date +%Y%m%d-%H%M%S)
  #         base: main  # ou master, dependendo da sua branch padr√£o
  #         title: "üìö Atualiza√ß√£o dos livros renderizados - $(date +'%Y-%m-%d %H:%M')"
  #         body: |
  #           ## üìñ Nova Renderiza√ß√£o dos Livros Quarto
            
  #           Esta PR cont√©m os livros atualizados renderizados a partir das mudan√ßas na branch `main`.
            
  #           ### üìã Detalhes da Renderiza√ß√£o
  #           - **Commit fonte**: ${{ github.sha }}
  #           - **Workflow**: ${{ github.run_id }}
  #           - **Data**: $(date +'%Y-%m-%d %H:%M:%S UTC')
  #           - **Triggering commit**: ${{ github.event.head_commit.message }}
            
  #           ### üìö Livros Renderizados
  #           $(ls _rendered 2>/dev/null | sed 's/^/- üìñ /' || echo "- Nenhum livro renderizado")
            
  #           ### üîÑ Mudan√ßas Inclu√≠das
  #           - ‚úÖ Livros Quarto renderizados para HTML na pasta `book/`
  #           - ‚úÖ √çndice de livros atualizado (`book/books-index.json`)
  #           - ‚úÖ Estrutura de arquivos organizada
            
  #           ### üìÅ Estrutura Adicionada/Atualizada
  #           ```
  #           book/
  #           ‚îú‚îÄ‚îÄ books-index.json     ‚Üê √çndice com metadata
  #           ‚îú‚îÄ‚îÄ livro1/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îú‚îÄ‚îÄ livro2/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îî‚îÄ‚îÄ ...
  #           ```
            
  #           ### üìù Arquivos Principais
  #           - `book/books-index.json` - √çndice com metadata dos livros
  #           - `book/*/index.html` - P√°ginas principais dos livros
  #           - Assets e recursos complementares
            
  #           ---
            
  #           ## üëÄ Review Checklist
            
  #           Por favor, verifique:
  #           - [ ] üìñ Livros foram renderizados corretamente
  #           - [ ] üé® Formata√ß√£o e estilos est√£o adequados  
  #           - [ ] üîó Links internos funcionam
  #           - [ ] üì± Layout √© responsivo
  #           - [ ] üìã √çndice JSON est√° correto
  #           - [ ] üìÅ Estrutura de pastas est√° organizada
            
  #           ---
  #           **‚ö†Ô∏è Esta PR requer aprova√ß√£o manual do propriet√°rio antes do merge.**
  #         labels: |
  #           books-update
  #           quarto-render
  #           needs-review
  #           automated-pr
  #         assignees: ${{ github.repository_owner }}
  #         draft: false
  #         commit-message: |
  #           üìö Adiciona/Atualiza livros renderizados
            
  #           Livros processados:
  #           $(ls _rendered 2>/dev/null | sed 's/^/- /' || echo "- Nenhum")
            
  #           - Renderiza√ß√£o Quarto ‚Üí HTML
  #           - √çndice JSON gerado automaticamente
  #           - Estrutura organizada em book/
            
  #           Commit fonte: ${{ github.sha }}
  #           Data: $(date +'%Y-%m-%d %H:%M:%S UTC')

  #     - name: Adiciona coment√°rio com instru√ß√µes
  #       if: steps.create-pr.outputs.pull-request-number
  #       uses: peter-evans/create-or-update-comment@v3
  #       with:
  #         token: ${{ env.TOKEN }}
  #         issue-number: ${{ steps.create-pr.outputs.pull-request-number }}
  #         body: |
  #           ## ü§ñ Instru√ß√µes Autom√°ticas
            
  #           ### üìã Status do Workflow
  #           ‚úÖ Livros renderizados com sucesso  
  #           ‚úÖ Pull Request criada  
  #           ‚è≥ **Aguardando sua aprova√ß√£o**  
            
  #           ### üîç Como Revisar
            
  #           1. **Verifique os arquivos alterados** na aba "Files changed"
  #           2. **Teste os livros localmente** se necess√°rio:
  #              ```bash
  #              git checkout update-books-$(date +%Y%m%d-%H%M%S)
  #              # Abra book/*/index.html no navegador
  #              ```
  #           3. **Aprove a PR** quando estiver satisfeito
            
  #           ### üìÅ Arquivos Importantes
  #           - `books-index.json` - Metadata dos livros
  #           - Cada pasta de livro cont√©m o HTML renderizado
            
  #           ---
  #           *Esta PR foi criada automaticamente e **requer sua aprova√ß√£o** para merge.*

  #     - name: Limpa arquivos tempor√°rios
  #       run: |
  #         rm -rf _rendered
  #         echo "‚úÖ Arquivos tempor√°rios removidos"

  # summary:
  #   needs: [render-and-create-pr]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Resultado final
  #       run: |
  #         if [ "${{ needs.render-and-create-pr.outputs.pull-request-number }}" ]; then
  #           echo "üéâ Pipeline conclu√≠do com sucesso!"
  #           echo "üìã Pull Request criada: #${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #           echo "‚è≥ Aguardando aprova√ß√£o do propriet√°rio do reposit√≥rio"
  #           echo "üëÄ Revisar em: ${{ github.server_url }}/${{ github.repository }}/pull/${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #         else
  #           echo "‚ÑπÔ∏è  Nenhuma PR foi criada (possivelmente sem mudan√ßas)"
  #         fi | sort)
  #         book_count=$(echo "$book_list" | wc -l)
          
  #         if [ -z "$book_list" ] || [ "$book_count" -eq 0 ]; then
  #           echo "‚ùå Nenhum livro encontrado com padr√£o [A-Z]{3}[0-9]{4}"
  #           echo "üìÅ Conte√∫do atual de build/:"
  #           ls -la build/ 2>/dev/null || echo "Diret√≥rio build/ n√£o existe"
  #           exit 1
  #         fi
          
  #         echo "üìö Livros encontrados ($book_count):"
  #         echo "$book_list" | while read folder; do
  #           book_name=$(basename "$folder")
  #           echo "   üìñ $book_name"
  #         done
          
  #         # Salva lista para pr√≥ximo step
  #         echo "$book_list" > book_list.txt
  #         echo "books_found=$book_count" >> $GITHUB_OUTPUT

  #     - name: Renderiza cada livro
  #       run: |
  #         echo "üîÑ Iniciando renderiza√ß√£o dos livros..."
          
  #         while read -r folder; do
  #           if [ -z "$folder" ]; then continue; fi
            
  #           book_name=$(basename "$folder")
  #           echo "‚ö° Renderizando: $book_name"
            
  #           if [ -f "$folder/_quarto.yml" ] || [ -f "$folder/index.qmd" ]; then
  #             if quarto render "$folder" --to html --execute --output-dir "_rendered/$book_name"; then
  #               echo "‚úÖ $book_name ‚Üí Sucesso"
  #             else
  #               echo "‚ùå $book_name ‚Üí Erro na renderiza√ß√£o"
  #               exit 1
  #             fi
  #           else
  #             echo "‚ö†Ô∏è  $book_name ‚Üí Sem _quarto.yml ou index.qmd (pulando)"
  #           fi
  #         done < book_list.txt

  #     - name: Relat√≥rio de renderiza√ß√£o
  #       run: |
  #         echo "üìä Relat√≥rio final da renderiza√ß√£o:"
  #         echo "   üìö Livros processados: ${{ steps.list-books.outputs.books_found }}"
          
  #         rendered_count=$(ls _rendered 2>/dev/null | wc -l)
  #         echo "   ‚úÖ Livros renderizados: $rendered_count"
          
  #         if [ "$rendered_count" -gt 0 ]; then
  #           echo "üìã Livros renderizados com sucesso:"
  #           ls _rendered | while read book; do
  #             echo "   üéØ $book"
  #           done
  #         else
  #           echo "‚ùå Nenhum livro foi renderizado"
  #           exit 1
  #         fi
          
  #         # Limpa arquivo tempor√°rio
  #         rm -f book_list.txt

  #     - name: Prepara estrutura para Pull Request
  #       run: |
  #         echo "üîÑ Preparando arquivos para PR na branch principal..."
          
  #         # Cria/atualiza diret√≥rio book/ na pr√≥pria main
  #         echo "üîÑ Sincronizando livros renderizados na pasta book/..."
          
  #         # Remove vers√µes antigas apenas dos livros que foram re-renderizados
  #         # (livros que seguem o padr√£o [A-Z]{3}[0-9]{4})
  #         for folder in $(ls _rendered 2>/dev/null || echo ""); do
  #           # Verifica se o nome segue o padr√£o antes de remover
  #           if echo "$folder" | grep -qE '^[A-Z]{3}[0-9]{4}

  #     - name: Gera √≠ndice dos livros (JSON)
  #       run: |
  #         echo "üìã Gerando √≠ndice de livros..."
  #         echo '{
  #           "books": [' > book/books-index.json
          
  #         first=true
  #         # Processa apenas livros que seguem o padr√£o [A-Z]{3}[0-9]{4}
  #         for folder in $(ls book 2>/dev/null | grep -E '^[A-Z]{3}[0-9]{4}

  #     - name: Cria Pull Request para branch padr√£o
  #       id: create-pr
  #       uses: peter-evans/create-pull-request@v5
  #       with:
  #         token: ${{ env.TOKEN }}
  #         branch: books-render-$(date +%Y%m%d-%H%M%S)
  #         base: main  # ou master, dependendo da sua branch padr√£o
  #         title: "üìö Atualiza√ß√£o dos livros renderizados - $(date +'%Y-%m-%d %H:%M')"
  #         body: |
  #           ## üìñ Nova Renderiza√ß√£o dos Livros Quarto
            
  #           Esta PR cont√©m os livros atualizados renderizados a partir das mudan√ßas na branch `main`.
            
  #           ### üìã Detalhes da Renderiza√ß√£o
  #           - **Commit fonte**: ${{ github.sha }}
  #           - **Workflow**: ${{ github.run_id }}
  #           - **Data**: $(date +'%Y-%m-%d %H:%M:%S UTC')
  #           - **Triggering commit**: ${{ github.event.head_commit.message }}
            
  #           ### üìö Livros Renderizados
  #           $(ls _rendered 2>/dev/null | sed 's/^/- üìñ /' || echo "- Nenhum livro renderizado")
            
  #           ### üîÑ Mudan√ßas Inclu√≠das
  #           - ‚úÖ Livros Quarto renderizados para HTML na pasta `book/`
  #           - ‚úÖ √çndice de livros atualizado (`book/books-index.json`)
  #           - ‚úÖ Estrutura de arquivos organizada
            
  #           ### üìÅ Estrutura Adicionada/Atualizada
  #           ```
  #           book/
  #           ‚îú‚îÄ‚îÄ books-index.json     ‚Üê √çndice com metadata
  #           ‚îú‚îÄ‚îÄ livro1/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îú‚îÄ‚îÄ livro2/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îî‚îÄ‚îÄ ...
  #           ```
            
  #           ### üìù Arquivos Principais
  #           - `book/books-index.json` - √çndice com metadata dos livros
  #           - `book/*/index.html` - P√°ginas principais dos livros
  #           - Assets e recursos complementares
            
  #           ---
            
  #           ## üëÄ Review Checklist
            
  #           Por favor, verifique:
  #           - [ ] üìñ Livros foram renderizados corretamente
  #           - [ ] üé® Formata√ß√£o e estilos est√£o adequados  
  #           - [ ] üîó Links internos funcionam
  #           - [ ] üì± Layout √© responsivo
  #           - [ ] üìã √çndice JSON est√° correto
  #           - [ ] üìÅ Estrutura de pastas est√° organizada
            
  #           ---
  #           **‚ö†Ô∏è Esta PR requer aprova√ß√£o manual do propriet√°rio antes do merge.**
  #         labels: |
  #           books-update
  #           quarto-render
  #           needs-review
  #           automated-pr
  #         assignees: ${{ github.repository_owner }}
  #         draft: false
  #         commit-message: |
  #           üìö Adiciona/Atualiza livros renderizados
            
  #           Livros processados:
  #           $(ls _rendered 2>/dev/null | sed 's/^/- /' || echo "- Nenhum")
            
  #           - Renderiza√ß√£o Quarto ‚Üí HTML
  #           - √çndice JSON gerado automaticamente
  #           - Estrutura organizada em book/
            
  #           Commit fonte: ${{ github.sha }}
  #           Data: $(date +'%Y-%m-%d %H:%M:%S UTC')

  #     - name: Adiciona coment√°rio com instru√ß√µes
  #       if: steps.create-pr.outputs.pull-request-number
  #       uses: peter-evans/create-or-update-comment@v3
  #       with:
  #         token: ${{ env.TOKEN }}
  #         issue-number: ${{ steps.create-pr.outputs.pull-request-number }}
  #         body: |
  #           ## ü§ñ Instru√ß√µes Autom√°ticas
            
  #           ### üìã Status do Workflow
  #           ‚úÖ Livros renderizados com sucesso  
  #           ‚úÖ Pull Request criada  
  #           ‚è≥ **Aguardando sua aprova√ß√£o**  
            
  #           ### üîç Como Revisar
            
  #           1. **Verifique os arquivos alterados** na aba "Files changed"
  #           2. **Teste os livros localmente** se necess√°rio:
  #              ```bash
  #              git checkout update-books-$(date +%Y%m%d-%H%M%S)
  #              # Abra book/*/index.html no navegador
  #              ```
  #           3. **Aprove a PR** quando estiver satisfeito
            
  #           ### üìÅ Arquivos Importantes
  #           - `books-index.json` - Metadata dos livros
  #           - Cada pasta de livro cont√©m o HTML renderizado
            
  #           ---
  #           *Esta PR foi criada automaticamente e **requer sua aprova√ß√£o** para merge.*

  #     - name: Limpa arquivos tempor√°rios
  #       run: |
  #         rm -rf _rendered
  #         echo "‚úÖ Arquivos tempor√°rios removidos"

  # summary:
  #   needs: [render-and-create-pr]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Resultado final
  #       run: |
  #         if [ "${{ needs.render-and-create-pr.outputs.pull-request-number }}" ]; then
  #           echo "üéâ Pipeline conclu√≠do com sucesso!"
  #           echo "üìã Pull Request criada: #${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #           echo "‚è≥ Aguardando aprova√ß√£o do propriet√°rio do reposit√≥rio"
  #           echo "üëÄ Revisar em: ${{ github.server_url }}/${{ github.repository }}/pull/${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #         else
  #           echo "‚ÑπÔ∏è  Nenhuma PR foi criada (possivelmente sem mudan√ßas)"
  #         fi; then
  #             if [ -d "book/$folder" ]; then
  #               echo "üóëÔ∏è  Removendo vers√£o antiga: $folder"
  #               rm -rf "book/$folder"
  #             else
  #               echo "üìö Novo livro detectado: $folder"
  #             fi
  #           else
  #             echo "‚ö†Ô∏è  Pasta $folder n√£o segue padr√£o [A-Z]{3}[0-9]{4} - ignorando"
  #           fi
  #         done
          
  #         # Move novos livros renderizados
  #         mkdir -p book
  #         if [ -d "_rendered" ] && [ "$(ls -A _rendered 2>/dev/null)" ]; then
  #           cp -r _rendered/* book/
  #           echo "‚úÖ Livros sincronizados em book/ com sucesso"
            
  #           # Lista livros sincronizados
  #           echo "üìã Livros sincronizados:"
  #           for book in $(ls book/ | grep -E '^[A-Z]{3}[0-9]{4}

  #     - name: Gera √≠ndice dos livros (JSON)
  #       run: |
  #         echo "üìã Gerando √≠ndice de livros..."
  #         echo '{
  #           "books": [' > book/books-index.json
          
  #         first=true
  #         for folder in $(ls book 2>/dev/null | grep -v "books-index.json" || echo ""); do
  #           if [ -d "book/$folder" ]; then
  #             if [ "$first" = false ]; then
  #               echo ',' >> book/books-index.json
  #             fi
              
  #             # Extrai t√≠tulo do index.html se existir
  #             title="$folder"
  #             if [ -f "book/$folder/index.html" ]; then
  #               extracted_title=$(grep -o '<title[^>]*>[^<]*' "book/$folder/index.html" | sed 's/<title[^>]*>//' | head -1)
  #               if [ ! -z "$extracted_title" ]; then
  #                 title="$extracted_title"
  #               fi
  #             fi
              
  #             echo "    {
  #               \"id\": \"$folder\",
  #               \"title\": \"$title\",
  #               \"path\": \"$folder/index.html\",
  #               \"updated\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
  #             }" >> book/books-index.json
  #             first=false
  #           fi
  #         done
          
  #         echo '
  #           ],
  #           "last_updated": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
  #         }' >> book/books-index.json
          
  #         echo "‚úÖ √çndice gerado: $(cat book/books-index.json | jq '.books | length') livros"

  #     - name: Cria Pull Request para branch padr√£o
  #       id: create-pr
  #       uses: peter-evans/create-pull-request@v5
  #       with:
  #         token: ${{ env.TOKEN }}
  #         branch: books-render-$(date +%Y%m%d-%H%M%S)
  #         base: main  # ou master, dependendo da sua branch padr√£o
  #         title: "üìö Atualiza√ß√£o dos livros renderizados - $(date +'%Y-%m-%d %H:%M')"
  #         body: |
  #           ## üìñ Nova Renderiza√ß√£o dos Livros Quarto
            
  #           Esta PR cont√©m os livros atualizados renderizados a partir das mudan√ßas na branch `main`.
            
  #           ### üìã Detalhes da Renderiza√ß√£o
  #           - **Commit fonte**: ${{ github.sha }}
  #           - **Workflow**: ${{ github.run_id }}
  #           - **Data**: $(date +'%Y-%m-%d %H:%M:%S UTC')
  #           - **Triggering commit**: ${{ github.event.head_commit.message }}
            
  #           ### üìö Livros Renderizados
  #           $(ls _rendered 2>/dev/null | sed 's/^/- üìñ /' || echo "- Nenhum livro renderizado")
            
  #           ### üîÑ Mudan√ßas Inclu√≠das
  #           - ‚úÖ Livros Quarto renderizados para HTML na pasta `book/`
  #           - ‚úÖ √çndice de livros atualizado (`book/books-index.json`)
  #           - ‚úÖ Estrutura de arquivos organizada
            
  #           ### üìÅ Estrutura Adicionada/Atualizada
  #           ```
  #           book/
  #           ‚îú‚îÄ‚îÄ books-index.json     ‚Üê √çndice com metadata
  #           ‚îú‚îÄ‚îÄ livro1/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îú‚îÄ‚îÄ livro2/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îî‚îÄ‚îÄ ...
  #           ```
            
  #           ### üìù Arquivos Principais
  #           - `book/books-index.json` - √çndice com metadata dos livros
  #           - `book/*/index.html` - P√°ginas principais dos livros
  #           - Assets e recursos complementares
            
  #           ---
            
  #           ## üëÄ Review Checklist
            
  #           Por favor, verifique:
  #           - [ ] üìñ Livros foram renderizados corretamente
  #           - [ ] üé® Formata√ß√£o e estilos est√£o adequados  
  #           - [ ] üîó Links internos funcionam
  #           - [ ] üì± Layout √© responsivo
  #           - [ ] üìã √çndice JSON est√° correto
  #           - [ ] üìÅ Estrutura de pastas est√° organizada
            
  #           ---
  #           **‚ö†Ô∏è Esta PR requer aprova√ß√£o manual do propriet√°rio antes do merge.**
  #         labels: |
  #           books-update
  #           quarto-render
  #           needs-review
  #           automated-pr
  #         assignees: ${{ github.repository_owner }}
  #         draft: false
  #         commit-message: |
  #           üìö Adiciona/Atualiza livros renderizados
            
  #           Livros processados:
  #           $(ls _rendered 2>/dev/null | sed 's/^/- /' || echo "- Nenhum")
            
  #           - Renderiza√ß√£o Quarto ‚Üí HTML
  #           - √çndice JSON gerado automaticamente
  #           - Estrutura organizada em book/
            
  #           Commit fonte: ${{ github.sha }}
  #           Data: $(date +'%Y-%m-%d %H:%M:%S UTC')

  #     - name: Adiciona coment√°rio com instru√ß√µes
  #       if: steps.create-pr.outputs.pull-request-number
  #       uses: peter-evans/create-or-update-comment@v3
  #       with:
  #         token: ${{ env.TOKEN }}
  #         issue-number: ${{ steps.create-pr.outputs.pull-request-number }}
  #         body: |
  #           ## ü§ñ Instru√ß√µes Autom√°ticas
            
  #           ### üìã Status do Workflow
  #           ‚úÖ Livros renderizados com sucesso  
  #           ‚úÖ Pull Request criada  
  #           ‚è≥ **Aguardando sua aprova√ß√£o**  
            
  #           ### üîç Como Revisar
            
  #           1. **Verifique os arquivos alterados** na aba "Files changed"
  #           2. **Teste os livros localmente** se necess√°rio:
  #              ```bash
  #              git checkout update-books-$(date +%Y%m%d-%H%M%S)
  #              # Abra book/*/index.html no navegador
  #              ```
  #           3. **Aprove a PR** quando estiver satisfeito
            
  #           ### üìÅ Arquivos Importantes
  #           - `books-index.json` - Metadata dos livros
  #           - Cada pasta de livro cont√©m o HTML renderizado
            
  #           ---
  #           *Esta PR foi criada automaticamente e **requer sua aprova√ß√£o** para merge.*

  #     - name: Limpa arquivos tempor√°rios
  #       run: |
  #         rm -rf _rendered
  #         echo "‚úÖ Arquivos tempor√°rios removidos"

  # summary:
  #   needs: [render-and-create-pr]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Resultado final
  #       run: |
  #         if [ "${{ needs.render-and-create-pr.outputs.pull-request-number }}" ]; then
  #           echo "üéâ Pipeline conclu√≠do com sucesso!"
  #           echo "üìã Pull Request criada: #${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #           echo "‚è≥ Aguardando aprova√ß√£o do propriet√°rio do reposit√≥rio"
  #           echo "üëÄ Revisar em: ${{ github.server_url }}/${{ github.repository }}/pull/${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #         else
  #           echo "‚ÑπÔ∏è  Nenhuma PR foi criada (possivelmente sem mudan√ßas)"
  #         fi); do
  #             echo "   üìñ $book"
  #           done
  #         else
  #           echo "‚ö†Ô∏è  Nenhum livro foi renderizado"
  #           exit 1
  #         fi

  #     - name: Gera √≠ndice dos livros (JSON)
  #       run: |
  #         echo "üìã Gerando √≠ndice de livros..."
  #         echo '{
  #           "books": [' > book/books-index.json
          
  #         first=true
  #         for folder in $(ls book 2>/dev/null | grep -v "books-index.json" || echo ""); do
  #           if [ -d "book/$folder" ]; then
  #             if [ "$first" = false ]; then
  #               echo ',' >> book/books-index.json
  #             fi
              
  #             # Extrai t√≠tulo do index.html se existir
  #             title="$folder"
  #             if [ -f "book/$folder/index.html" ]; then
  #               extracted_title=$(grep -o '<title[^>]*>[^<]*' "book/$folder/index.html" | sed 's/<title[^>]*>//' | head -1)
  #               if [ ! -z "$extracted_title" ]; then
  #                 title="$extracted_title"
  #               fi
  #             fi
              
  #             echo "    {
  #               \"id\": \"$folder\",
  #               \"title\": \"$title\",
  #               \"path\": \"$folder/index.html\",
  #               \"updated\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
  #             }" >> book/books-index.json
  #             first=false
  #           fi
  #         done
          
  #         echo '
  #           ],
  #           "last_updated": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
  #         }' >> book/books-index.json
          
  #         echo "‚úÖ √çndice gerado: $(cat book/books-index.json | jq '.books | length') livros"

  #     - name: Cria Pull Request para branch padr√£o
  #       id: create-pr
  #       uses: peter-evans/create-pull-request@v5
  #       with:
  #         token: ${{ env.TOKEN }}
  #         branch: books-render-$(date +%Y%m%d-%H%M%S)
  #         base: main  # ou master, dependendo da sua branch padr√£o
  #         title: "üìö Atualiza√ß√£o dos livros renderizados - $(date +'%Y-%m-%d %H:%M')"
  #         body: |
  #           ## üìñ Nova Renderiza√ß√£o dos Livros Quarto
            
  #           Esta PR cont√©m os livros atualizados renderizados a partir das mudan√ßas na branch `main`.
            
  #           ### üìã Detalhes da Renderiza√ß√£o
  #           - **Commit fonte**: ${{ github.sha }}
  #           - **Workflow**: ${{ github.run_id }}
  #           - **Data**: $(date +'%Y-%m-%d %H:%M:%S UTC')
  #           - **Triggering commit**: ${{ github.event.head_commit.message }}
            
  #           ### üìö Livros Renderizados
  #           $(ls _rendered 2>/dev/null | sed 's/^/- üìñ /' || echo "- Nenhum livro renderizado")
            
  #           ### üîÑ Mudan√ßas Inclu√≠das
  #           - ‚úÖ Livros Quarto renderizados para HTML na pasta `book/`
  #           - ‚úÖ √çndice de livros atualizado (`book/books-index.json`)
  #           - ‚úÖ Estrutura de arquivos organizada
            
  #           ### üìÅ Estrutura Adicionada/Atualizada
  #           ```
  #           book/
  #           ‚îú‚îÄ‚îÄ books-index.json     ‚Üê √çndice com metadata
  #           ‚îú‚îÄ‚îÄ livro1/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îú‚îÄ‚îÄ livro2/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îî‚îÄ‚îÄ ...
  #           ```
            
  #           ### üìù Arquivos Principais
  #           - `book/books-index.json` - √çndice com metadata dos livros
  #           - `book/*/index.html` - P√°ginas principais dos livros
  #           - Assets e recursos complementares
            
  #           ---
            
  #           ## üëÄ Review Checklist
            
  #           Por favor, verifique:
  #           - [ ] üìñ Livros foram renderizados corretamente
  #           - [ ] üé® Formata√ß√£o e estilos est√£o adequados  
  #           - [ ] üîó Links internos funcionam
  #           - [ ] üì± Layout √© responsivo
  #           - [ ] üìã √çndice JSON est√° correto
  #           - [ ] üìÅ Estrutura de pastas est√° organizada
            
  #           ---
  #           **‚ö†Ô∏è Esta PR requer aprova√ß√£o manual do propriet√°rio antes do merge.**
  #         labels: |
  #           books-update
  #           quarto-render
  #           needs-review
  #           automated-pr
  #         assignees: ${{ github.repository_owner }}
  #         draft: false
  #         commit-message: |
  #           üìö Adiciona/Atualiza livros renderizados
            
  #           Livros processados:
  #           $(ls _rendered 2>/dev/null | sed 's/^/- /' || echo "- Nenhum")
            
  #           - Renderiza√ß√£o Quarto ‚Üí HTML
  #           - √çndice JSON gerado automaticamente
  #           - Estrutura organizada em book/
            
  #           Commit fonte: ${{ github.sha }}
  #           Data: $(date +'%Y-%m-%d %H:%M:%S UTC')

  #     - name: Adiciona coment√°rio com instru√ß√µes
  #       if: steps.create-pr.outputs.pull-request-number
  #       uses: peter-evans/create-or-update-comment@v3
  #       with:
  #         token: ${{ env.TOKEN }}
  #         issue-number: ${{ steps.create-pr.outputs.pull-request-number }}
  #         body: |
  #           ## ü§ñ Instru√ß√µes Autom√°ticas
            
  #           ### üìã Status do Workflow
  #           ‚úÖ Livros renderizados com sucesso  
  #           ‚úÖ Pull Request criada  
  #           ‚è≥ **Aguardando sua aprova√ß√£o**  
            
  #           ### üîç Como Revisar
            
  #           1. **Verifique os arquivos alterados** na aba "Files changed"
  #           2. **Teste os livros localmente** se necess√°rio:
  #              ```bash
  #              git checkout update-books-$(date +%Y%m%d-%H%M%S)
  #              # Abra book/*/index.html no navegador
  #              ```
  #           3. **Aprove a PR** quando estiver satisfeito
            
  #           ### üìÅ Arquivos Importantes
  #           - `books-index.json` - Metadata dos livros
  #           - Cada pasta de livro cont√©m o HTML renderizado
            
  #           ---
  #           *Esta PR foi criada automaticamente e **requer sua aprova√ß√£o** para merge.*

  #     - name: Limpa arquivos tempor√°rios
  #       run: |
  #         rm -rf _rendered
  #         echo "‚úÖ Arquivos tempor√°rios removidos"

  # summary:
  #   needs: [render-and-create-pr]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Resultado final
  #       run: |
  #         if [ "${{ needs.render-and-create-pr.outputs.pull-request-number }}" ]; then
  #           echo "üéâ Pipeline conclu√≠do com sucesso!"
  #           echo "üìã Pull Request criada: #${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #           echo "‚è≥ Aguardando aprova√ß√£o do propriet√°rio do reposit√≥rio"
  #           echo "üëÄ Revisar em: ${{ github.server_url }}/${{ github.repository }}/pull/${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #         else
  #           echo "‚ÑπÔ∏è  Nenhuma PR foi criada (possivelmente sem mudan√ßas)"
  #         fi | sort); do
  #           if [ -d "book/$folder" ]; then
  #             if [ "$first" = false ]; then
  #               echo ',' >> book/books-index.json
  #             fi
              
  #             # Extrai t√≠tulo do index.html se existir
  #             title="$folder"
  #             subject_code="${folder:0:3}"  # Primeiras 3 letras
  #             course_number="${folder:3:4}" # 4 n√∫meros
              
  #             if [ -f "book/$folder/index.html" ]; then
  #               extracted_title=$(grep -o '<title[^>]*>[^<]*' "book/$folder/index.html" | sed 's/<title[^>]*>//' | head -1)
  #               if [ ! -z "$extracted_title" ]; then
  #                 title="$extracted_title"
  #               fi
  #             fi
              
  #             echo "    {
  #               \"id\": \"$folder\",
  #               \"title\": \"$title\",
  #               \"subject_code\": \"$subject_code\",
  #               \"course_number\": \"$course_number\",
  #               \"path\": \"$folder/index.html\",
  #               \"updated\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
  #             }" >> book/books-index.json
  #             first=false
              
  #             echo "   üìñ Indexado: $folder ($title)"
  #           fi
  #         done
          
  #         echo '
  #           ],
  #           "last_updated": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
  #         }' >> book/books-index.json
          
  #         book_count=$(ls book 2>/dev/null | grep -E '^[A-Z]{3}[0-9]{4}

  #     - name: Cria Pull Request para branch padr√£o
  #       id: create-pr
  #       uses: peter-evans/create-pull-request@v5
  #       with:
  #         token: ${{ env.TOKEN }}
  #         branch: books-render-$(date +%Y%m%d-%H%M%S)
  #         base: main  # ou master, dependendo da sua branch padr√£o
  #         title: "üìö Atualiza√ß√£o dos livros renderizados - $(date +'%Y-%m-%d %H:%M')"
  #         body: |
  #           ## üìñ Nova Renderiza√ß√£o dos Livros Quarto
            
  #           Esta PR cont√©m os livros atualizados renderizados a partir das mudan√ßas na branch `main`.
            
  #           ### üìã Detalhes da Renderiza√ß√£o
  #           - **Commit fonte**: ${{ github.sha }}
  #           - **Workflow**: ${{ github.run_id }}
  #           - **Data**: $(date +'%Y-%m-%d %H:%M:%S UTC')
  #           - **Triggering commit**: ${{ github.event.head_commit.message }}
            
  #           ### üìö Livros Renderizados
  #           $(ls _rendered 2>/dev/null | sed 's/^/- üìñ /' || echo "- Nenhum livro renderizado")
            
  #           ### üîÑ Mudan√ßas Inclu√≠das
  #           - ‚úÖ Livros Quarto renderizados para HTML na pasta `book/`
  #           - ‚úÖ √çndice de livros atualizado (`book/books-index.json`)
  #           - ‚úÖ Estrutura de arquivos organizada
            
  #           ### üìÅ Estrutura Adicionada/Atualizada
  #           ```
  #           book/
  #           ‚îú‚îÄ‚îÄ books-index.json     ‚Üê √çndice com metadata
  #           ‚îú‚îÄ‚îÄ livro1/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îú‚îÄ‚îÄ livro2/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îî‚îÄ‚îÄ ...
  #           ```
            
  #           ### üìù Arquivos Principais
  #           - `book/books-index.json` - √çndice com metadata dos livros
  #           - `book/*/index.html` - P√°ginas principais dos livros
  #           - Assets e recursos complementares
            
  #           ---
            
  #           ## üëÄ Review Checklist
            
  #           Por favor, verifique:
  #           - [ ] üìñ Livros foram renderizados corretamente
  #           - [ ] üé® Formata√ß√£o e estilos est√£o adequados  
  #           - [ ] üîó Links internos funcionam
  #           - [ ] üì± Layout √© responsivo
  #           - [ ] üìã √çndice JSON est√° correto
  #           - [ ] üìÅ Estrutura de pastas est√° organizada
            
  #           ---
  #           **‚ö†Ô∏è Esta PR requer aprova√ß√£o manual do propriet√°rio antes do merge.**
  #         labels: |
  #           books-update
  #           quarto-render
  #           needs-review
  #           automated-pr
  #         assignees: ${{ github.repository_owner }}
  #         draft: false
  #         commit-message: |
  #           üìö Adiciona/Atualiza livros renderizados
            
  #           Livros processados:
  #           $(ls _rendered 2>/dev/null | sed 's/^/- /' || echo "- Nenhum")
            
  #           - Renderiza√ß√£o Quarto ‚Üí HTML
  #           - √çndice JSON gerado automaticamente
  #           - Estrutura organizada em book/
            
  #           Commit fonte: ${{ github.sha }}
  #           Data: $(date +'%Y-%m-%d %H:%M:%S UTC')

  #     - name: Adiciona coment√°rio com instru√ß√µes
  #       if: steps.create-pr.outputs.pull-request-number
  #       uses: peter-evans/create-or-update-comment@v3
  #       with:
  #         token: ${{ env.TOKEN }}
  #         issue-number: ${{ steps.create-pr.outputs.pull-request-number }}
  #         body: |
  #           ## ü§ñ Instru√ß√µes Autom√°ticas
            
  #           ### üìã Status do Workflow
  #           ‚úÖ Livros renderizados com sucesso  
  #           ‚úÖ Pull Request criada  
  #           ‚è≥ **Aguardando sua aprova√ß√£o**  
            
  #           ### üîç Como Revisar
            
  #           1. **Verifique os arquivos alterados** na aba "Files changed"
  #           2. **Teste os livros localmente** se necess√°rio:
  #              ```bash
  #              git checkout update-books-$(date +%Y%m%d-%H%M%S)
  #              # Abra book/*/index.html no navegador
  #              ```
  #           3. **Aprove a PR** quando estiver satisfeito
            
  #           ### üìÅ Arquivos Importantes
  #           - `books-index.json` - Metadata dos livros
  #           - Cada pasta de livro cont√©m o HTML renderizado
            
  #           ---
  #           *Esta PR foi criada automaticamente e **requer sua aprova√ß√£o** para merge.*

  #     - name: Limpa arquivos tempor√°rios
  #       run: |
  #         rm -rf _rendered
  #         echo "‚úÖ Arquivos tempor√°rios removidos"

  # summary:
  #   needs: [render-and-create-pr]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Resultado final
  #       run: |
  #         if [ "${{ needs.render-and-create-pr.outputs.pull-request-number }}" ]; then
  #           echo "üéâ Pipeline conclu√≠do com sucesso!"
  #           echo "üìã Pull Request criada: #${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #           echo "‚è≥ Aguardando aprova√ß√£o do propriet√°rio do reposit√≥rio"
  #           echo "üëÄ Revisar em: ${{ github.server_url }}/${{ github.repository }}/pull/${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #         else
  #           echo "‚ÑπÔ∏è  Nenhuma PR foi criada (possivelmente sem mudan√ßas)"
  #         fi; then
  #             if [ -d "book/$folder" ]; then
  #               echo "üóëÔ∏è  Removendo vers√£o antiga: $folder"
  #               rm -rf "book/$folder"
  #             else
  #               echo "üìö Novo livro detectado: $folder"
  #             fi
  #           else
  #             echo "‚ö†Ô∏è  Pasta $folder n√£o segue padr√£o [A-Z]{3}[0-9]{4} - ignorando"
  #           fi
  #         done
          
  #         # Move novos livros renderizados
  #         mkdir -p book
  #         if [ -d "_rendered" ] && [ "$(ls -A _rendered 2>/dev/null)" ]; then
  #           cp -r _rendered/* book/
  #           echo "‚úÖ Livros sincronizados em book/ com sucesso"
            
  #           # Lista livros sincronizados
  #           echo "üìã Livros sincronizados:"
  #           for book in $(ls book/ | grep -E '^[A-Z]{3}[0-9]{4}

  #     - name: Gera √≠ndice dos livros (JSON)
  #       run: |
  #         echo "üìã Gerando √≠ndice de livros..."
  #         echo '{
  #           "books": [' > book/books-index.json
          
  #         first=true
  #         for folder in $(ls book 2>/dev/null | grep -v "books-index.json" || echo ""); do
  #           if [ -d "book/$folder" ]; then
  #             if [ "$first" = false ]; then
  #               echo ',' >> book/books-index.json
  #             fi
              
  #             # Extrai t√≠tulo do index.html se existir
  #             title="$folder"
  #             if [ -f "book/$folder/index.html" ]; then
  #               extracted_title=$(grep -o '<title[^>]*>[^<]*' "book/$folder/index.html" | sed 's/<title[^>]*>//' | head -1)
  #               if [ ! -z "$extracted_title" ]; then
  #                 title="$extracted_title"
  #               fi
  #             fi
              
  #             echo "    {
  #               \"id\": \"$folder\",
  #               \"title\": \"$title\",
  #               \"path\": \"$folder/index.html\",
  #               \"updated\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
  #             }" >> book/books-index.json
  #             first=false
  #           fi
  #         done
          
  #         echo '
  #           ],
  #           "last_updated": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
  #         }' >> book/books-index.json
          
  #         echo "‚úÖ √çndice gerado: $(cat book/books-index.json | jq '.books | length') livros"

  #     - name: Cria Pull Request para branch padr√£o
  #       id: create-pr
  #       uses: peter-evans/create-pull-request@v5
  #       with:
  #         token: ${{ env.TOKEN }}
  #         branch: books-render-$(date +%Y%m%d-%H%M%S)
  #         base: main  # ou master, dependendo da sua branch padr√£o
  #         title: "üìö Atualiza√ß√£o dos livros renderizados - $(date +'%Y-%m-%d %H:%M')"
  #         body: |
  #           ## üìñ Nova Renderiza√ß√£o dos Livros Quarto
            
  #           Esta PR cont√©m os livros atualizados renderizados a partir das mudan√ßas na branch `main`.
            
  #           ### üìã Detalhes da Renderiza√ß√£o
  #           - **Commit fonte**: ${{ github.sha }}
  #           - **Workflow**: ${{ github.run_id }}
  #           - **Data**: $(date +'%Y-%m-%d %H:%M:%S UTC')
  #           - **Triggering commit**: ${{ github.event.head_commit.message }}
            
  #           ### üìö Livros Renderizados
  #           $(ls _rendered 2>/dev/null | sed 's/^/- üìñ /' || echo "- Nenhum livro renderizado")
            
  #           ### üîÑ Mudan√ßas Inclu√≠das
  #           - ‚úÖ Livros Quarto renderizados para HTML na pasta `book/`
  #           - ‚úÖ √çndice de livros atualizado (`book/books-index.json`)
  #           - ‚úÖ Estrutura de arquivos organizada
            
  #           ### üìÅ Estrutura Adicionada/Atualizada
  #           ```
  #           book/
  #           ‚îú‚îÄ‚îÄ books-index.json     ‚Üê √çndice com metadata
  #           ‚îú‚îÄ‚îÄ livro1/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îú‚îÄ‚îÄ livro2/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îî‚îÄ‚îÄ ...
  #           ```
            
  #           ### üìù Arquivos Principais
  #           - `book/books-index.json` - √çndice com metadata dos livros
  #           - `book/*/index.html` - P√°ginas principais dos livros
  #           - Assets e recursos complementares
            
  #           ---
            
  #           ## üëÄ Review Checklist
            
  #           Por favor, verifique:
  #           - [ ] üìñ Livros foram renderizados corretamente
  #           - [ ] üé® Formata√ß√£o e estilos est√£o adequados  
  #           - [ ] üîó Links internos funcionam
  #           - [ ] üì± Layout √© responsivo
  #           - [ ] üìã √çndice JSON est√° correto
  #           - [ ] üìÅ Estrutura de pastas est√° organizada
            
  #           ---
  #           **‚ö†Ô∏è Esta PR requer aprova√ß√£o manual do propriet√°rio antes do merge.**
  #         labels: |
  #           books-update
  #           quarto-render
  #           needs-review
  #           automated-pr
  #         assignees: ${{ github.repository_owner }}
  #         draft: false
  #         commit-message: |
  #           üìö Adiciona/Atualiza livros renderizados
            
  #           Livros processados:
  #           $(ls _rendered 2>/dev/null | sed 's/^/- /' || echo "- Nenhum")
            
  #           - Renderiza√ß√£o Quarto ‚Üí HTML
  #           - √çndice JSON gerado automaticamente
  #           - Estrutura organizada em book/
            
  #           Commit fonte: ${{ github.sha }}
  #           Data: $(date +'%Y-%m-%d %H:%M:%S UTC')

  #     - name: Adiciona coment√°rio com instru√ß√µes
  #       if: steps.create-pr.outputs.pull-request-number
  #       uses: peter-evans/create-or-update-comment@v3
  #       with:
  #         token: ${{ env.TOKEN }}
  #         issue-number: ${{ steps.create-pr.outputs.pull-request-number }}
  #         body: |
  #           ## ü§ñ Instru√ß√µes Autom√°ticas
            
  #           ### üìã Status do Workflow
  #           ‚úÖ Livros renderizados com sucesso  
  #           ‚úÖ Pull Request criada  
  #           ‚è≥ **Aguardando sua aprova√ß√£o**  
            
  #           ### üîç Como Revisar
            
  #           1. **Verifique os arquivos alterados** na aba "Files changed"
  #           2. **Teste os livros localmente** se necess√°rio:
  #              ```bash
  #              git checkout update-books-$(date +%Y%m%d-%H%M%S)
  #              # Abra book/*/index.html no navegador
  #              ```
  #           3. **Aprove a PR** quando estiver satisfeito
            
  #           ### üìÅ Arquivos Importantes
  #           - `books-index.json` - Metadata dos livros
  #           - Cada pasta de livro cont√©m o HTML renderizado
            
  #           ---
  #           *Esta PR foi criada automaticamente e **requer sua aprova√ß√£o** para merge.*

  #     - name: Limpa arquivos tempor√°rios
  #       run: |
  #         rm -rf _rendered
  #         echo "‚úÖ Arquivos tempor√°rios removidos"

  # summary:
  #   needs: [render-and-create-pr]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Resultado final
  #       run: |
  #         if [ "${{ needs.render-and-create-pr.outputs.pull-request-number }}" ]; then
  #           echo "üéâ Pipeline conclu√≠do com sucesso!"
  #           echo "üìã Pull Request criada: #${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #           echo "‚è≥ Aguardando aprova√ß√£o do propriet√°rio do reposit√≥rio"
  #           echo "üëÄ Revisar em: ${{ github.server_url }}/${{ github.repository }}/pull/${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #         else
  #           echo "‚ÑπÔ∏è  Nenhuma PR foi criada (possivelmente sem mudan√ßas)"
  #         fi); do
  #             echo "   üìñ $book"
  #           done
  #         else
  #           echo "‚ö†Ô∏è  Nenhum livro foi renderizado"
  #           exit 1
  #         fi

  #     - name: Gera √≠ndice dos livros (JSON)
  #       run: |
  #         echo "üìã Gerando √≠ndice de livros..."
  #         echo '{
  #           "books": [' > book/books-index.json
          
  #         first=true
  #         for folder in $(ls book 2>/dev/null | grep -v "books-index.json" || echo ""); do
  #           if [ -d "book/$folder" ]; then
  #             if [ "$first" = false ]; then
  #               echo ',' >> book/books-index.json
  #             fi
              
  #             # Extrai t√≠tulo do index.html se existir
  #             title="$folder"
  #             if [ -f "book/$folder/index.html" ]; then
  #               extracted_title=$(grep -o '<title[^>]*>[^<]*' "book/$folder/index.html" | sed 's/<title[^>]*>//' | head -1)
  #               if [ ! -z "$extracted_title" ]; then
  #                 title="$extracted_title"
  #               fi
  #             fi
              
  #             echo "    {
  #               \"id\": \"$folder\",
  #               \"title\": \"$title\",
  #               \"path\": \"$folder/index.html\",
  #               \"updated\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
  #             }" >> book/books-index.json
  #             first=false
  #           fi
  #         done
          
  #         echo '
  #           ],
  #           "last_updated": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
  #         }' >> book/books-index.json
          
  #         echo "‚úÖ √çndice gerado: $(cat book/books-index.json | jq '.books | length') livros"

  #     - name: Cria Pull Request para branch padr√£o
  #       id: create-pr
  #       uses: peter-evans/create-pull-request@v5
  #       with:
  #         token: ${{ env.TOKEN }}
  #         branch: books-render-$(date +%Y%m%d-%H%M%S)
  #         base: main  # ou master, dependendo da sua branch padr√£o
  #         title: "üìö Atualiza√ß√£o dos livros renderizados - $(date +'%Y-%m-%d %H:%M')"
  #         body: |
  #           ## üìñ Nova Renderiza√ß√£o dos Livros Quarto
            
  #           Esta PR cont√©m os livros atualizados renderizados a partir das mudan√ßas na branch `main`.
            
  #           ### üìã Detalhes da Renderiza√ß√£o
  #           - **Commit fonte**: ${{ github.sha }}
  #           - **Workflow**: ${{ github.run_id }}
  #           - **Data**: $(date +'%Y-%m-%d %H:%M:%S UTC')
  #           - **Triggering commit**: ${{ github.event.head_commit.message }}
            
  #           ### üìö Livros Renderizados
  #           $(ls _rendered 2>/dev/null | sed 's/^/- üìñ /' || echo "- Nenhum livro renderizado")
            
  #           ### üîÑ Mudan√ßas Inclu√≠das
  #           - ‚úÖ Livros Quarto renderizados para HTML na pasta `book/`
  #           - ‚úÖ √çndice de livros atualizado (`book/books-index.json`)
  #           - ‚úÖ Estrutura de arquivos organizada
            
  #           ### üìÅ Estrutura Adicionada/Atualizada
  #           ```
  #           book/
  #           ‚îú‚îÄ‚îÄ books-index.json     ‚Üê √çndice com metadata
  #           ‚îú‚îÄ‚îÄ livro1/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îú‚îÄ‚îÄ livro2/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îî‚îÄ‚îÄ ...
  #           ```
            
  #           ### üìù Arquivos Principais
  #           - `book/books-index.json` - √çndice com metadata dos livros
  #           - `book/*/index.html` - P√°ginas principais dos livros
  #           - Assets e recursos complementares
            
  #           ---
            
  #           ## üëÄ Review Checklist
            
  #           Por favor, verifique:
  #           - [ ] üìñ Livros foram renderizados corretamente
  #           - [ ] üé® Formata√ß√£o e estilos est√£o adequados  
  #           - [ ] üîó Links internos funcionam
  #           - [ ] üì± Layout √© responsivo
  #           - [ ] üìã √çndice JSON est√° correto
  #           - [ ] üìÅ Estrutura de pastas est√° organizada
            
  #           ---
  #           **‚ö†Ô∏è Esta PR requer aprova√ß√£o manual do propriet√°rio antes do merge.**
  #         labels: |
  #           books-update
  #           quarto-render
  #           needs-review
  #           automated-pr
  #         assignees: ${{ github.repository_owner }}
  #         draft: false
  #         commit-message: |
  #           üìö Adiciona/Atualiza livros renderizados
            
  #           Livros processados:
  #           $(ls _rendered 2>/dev/null | sed 's/^/- /' || echo "- Nenhum")
            
  #           - Renderiza√ß√£o Quarto ‚Üí HTML
  #           - √çndice JSON gerado automaticamente
  #           - Estrutura organizada em book/
            
  #           Commit fonte: ${{ github.sha }}
  #           Data: $(date +'%Y-%m-%d %H:%M:%S UTC')

  #     - name: Adiciona coment√°rio com instru√ß√µes
  #       if: steps.create-pr.outputs.pull-request-number
  #       uses: peter-evans/create-or-update-comment@v3
  #       with:
  #         token: ${{ env.TOKEN }}
  #         issue-number: ${{ steps.create-pr.outputs.pull-request-number }}
  #         body: |
  #           ## ü§ñ Instru√ß√µes Autom√°ticas
            
  #           ### üìã Status do Workflow
  #           ‚úÖ Livros renderizados com sucesso  
  #           ‚úÖ Pull Request criada  
  #           ‚è≥ **Aguardando sua aprova√ß√£o**  
            
  #           ### üîç Como Revisar
            
  #           1. **Verifique os arquivos alterados** na aba "Files changed"
  #           2. **Teste os livros localmente** se necess√°rio:
  #              ```bash
  #              git checkout update-books-$(date +%Y%m%d-%H%M%S)
  #              # Abra book/*/index.html no navegador
  #              ```
  #           3. **Aprove a PR** quando estiver satisfeito
            
  #           ### üìÅ Arquivos Importantes
  #           - `books-index.json` - Metadata dos livros
  #           - Cada pasta de livro cont√©m o HTML renderizado
            
  #           ---
  #           *Esta PR foi criada automaticamente e **requer sua aprova√ß√£o** para merge.*

  #     - name: Limpa arquivos tempor√°rios
  #       run: |
  #         rm -rf _rendered
  #         echo "‚úÖ Arquivos tempor√°rios removidos"

  # summary:
  #   needs: [render-and-create-pr]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Resultado final
  #       run: |
  #         if [ "${{ needs.render-and-create-pr.outputs.pull-request-number }}" ]; then
  #           echo "üéâ Pipeline conclu√≠do com sucesso!"
  #           echo "üìã Pull Request criada: #${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #           echo "‚è≥ Aguardando aprova√ß√£o do propriet√°rio do reposit√≥rio"
  #           echo "üëÄ Revisar em: ${{ github.server_url }}/${{ github.repository }}/pull/${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #         else
  #           echo "‚ÑπÔ∏è  Nenhuma PR foi criada (possivelmente sem mudan√ßas)"
  #         fi | wc -l)
  #         echo "‚úÖ √çndice gerado com $book_count livros"

  #     - name: Cria Pull Request para branch padr√£o
  #       id: create-pr
  #       uses: peter-evans/create-pull-request@v5
  #       with:
  #         token: ${{ env.TOKEN }}
  #         branch: books-render-$(date +%Y%m%d-%H%M%S)
  #         base: main  # ou master, dependendo da sua branch padr√£o
  #         title: "üìö Atualiza√ß√£o dos livros renderizados - $(date +'%Y-%m-%d %H:%M')"
  #         body: |
  #           ## üìñ Nova Renderiza√ß√£o dos Livros Quarto
            
  #           Esta PR cont√©m os livros atualizados renderizados a partir das mudan√ßas na branch `main`.
            
  #           ### üìã Detalhes da Renderiza√ß√£o
  #           - **Commit fonte**: ${{ github.sha }}
  #           - **Workflow**: ${{ github.run_id }}
  #           - **Data**: $(date +'%Y-%m-%d %H:%M:%S UTC')
  #           - **Triggering commit**: ${{ github.event.head_commit.message }}
            
  #           ### üìö Livros Renderizados
  #           $(ls _rendered 2>/dev/null | sed 's/^/- üìñ /' || echo "- Nenhum livro renderizado")
            
  #           ### üîÑ Mudan√ßas Inclu√≠das
  #           - ‚úÖ Livros Quarto renderizados para HTML na pasta `book/`
  #           - ‚úÖ √çndice de livros atualizado (`book/books-index.json`)
  #           - ‚úÖ Estrutura de arquivos organizada
            
  #           ### üìÅ Estrutura Adicionada/Atualizada
  #           ```
  #           book/
  #           ‚îú‚îÄ‚îÄ books-index.json     ‚Üê √çndice com metadata
  #           ‚îú‚îÄ‚îÄ livro1/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îú‚îÄ‚îÄ livro2/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îî‚îÄ‚îÄ ...
  #           ```
            
  #           ### üìù Arquivos Principais
  #           - `book/books-index.json` - √çndice com metadata dos livros
  #           - `book/*/index.html` - P√°ginas principais dos livros
  #           - Assets e recursos complementares
            
  #           ---
            
  #           ## üëÄ Review Checklist
            
  #           Por favor, verifique:
  #           - [ ] üìñ Livros foram renderizados corretamente
  #           - [ ] üé® Formata√ß√£o e estilos est√£o adequados  
  #           - [ ] üîó Links internos funcionam
  #           - [ ] üì± Layout √© responsivo
  #           - [ ] üìã √çndice JSON est√° correto
  #           - [ ] üìÅ Estrutura de pastas est√° organizada
            
  #           ---
  #           **‚ö†Ô∏è Esta PR requer aprova√ß√£o manual do propriet√°rio antes do merge.**
  #         labels: |
  #           books-update
  #           quarto-render
  #           needs-review
  #           automated-pr
  #         assignees: ${{ github.repository_owner }}
  #         draft: false
  #         commit-message: |
  #           üìö Adiciona/Atualiza livros renderizados
            
  #           Livros processados:
  #           $(ls _rendered 2>/dev/null | sed 's/^/- /' || echo "- Nenhum")
            
  #           - Renderiza√ß√£o Quarto ‚Üí HTML
  #           - √çndice JSON gerado automaticamente
  #           - Estrutura organizada em book/
            
  #           Commit fonte: ${{ github.sha }}
  #           Data: $(date +'%Y-%m-%d %H:%M:%S UTC')

  #     - name: Adiciona coment√°rio com instru√ß√µes
  #       if: steps.create-pr.outputs.pull-request-number
  #       uses: peter-evans/create-or-update-comment@v3
  #       with:
  #         token: ${{ env.TOKEN }}
  #         issue-number: ${{ steps.create-pr.outputs.pull-request-number }}
  #         body: |
  #           ## ü§ñ Instru√ß√µes Autom√°ticas
            
  #           ### üìã Status do Workflow
  #           ‚úÖ Livros renderizados com sucesso  
  #           ‚úÖ Pull Request criada  
  #           ‚è≥ **Aguardando sua aprova√ß√£o**  
            
  #           ### üîç Como Revisar
            
  #           1. **Verifique os arquivos alterados** na aba "Files changed"
  #           2. **Teste os livros localmente** se necess√°rio:
  #              ```bash
  #              git checkout update-books-$(date +%Y%m%d-%H%M%S)
  #              # Abra book/*/index.html no navegador
  #              ```
  #           3. **Aprove a PR** quando estiver satisfeito
            
  #           ### üìÅ Arquivos Importantes
  #           - `books-index.json` - Metadata dos livros
  #           - Cada pasta de livro cont√©m o HTML renderizado
            
  #           ---
  #           *Esta PR foi criada automaticamente e **requer sua aprova√ß√£o** para merge.*

  #     - name: Limpa arquivos tempor√°rios
  #       run: |
  #         rm -rf _rendered
  #         echo "‚úÖ Arquivos tempor√°rios removidos"

  # summary:
  #   needs: [render-and-create-pr]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Resultado final
  #       run: |
  #         if [ "${{ needs.render-and-create-pr.outputs.pull-request-number }}" ]; then
  #           echo "üéâ Pipeline conclu√≠do com sucesso!"
  #           echo "üìã Pull Request criada: #${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #           echo "‚è≥ Aguardando aprova√ß√£o do propriet√°rio do reposit√≥rio"
  #           echo "üëÄ Revisar em: ${{ github.server_url }}/${{ github.repository }}/pull/${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #         else
  #           echo "‚ÑπÔ∏è  Nenhuma PR foi criada (possivelmente sem mudan√ßas)"
  #         fi; then
  #             if [ -d "book/$folder" ]; then
  #               echo "üóëÔ∏è  Removendo vers√£o antiga: $folder"
  #               rm -rf "book/$folder"
  #             else
  #               echo "üìö Novo livro detectado: $folder"
  #             fi
  #           else
  #             echo "‚ö†Ô∏è  Pasta $folder n√£o segue padr√£o [A-Z]{3}[0-9]{4} - ignorando"
  #           fi
  #         done
          
  #         # Move novos livros renderizados
  #         mkdir -p book
  #         if [ -d "_rendered" ] && [ "$(ls -A _rendered 2>/dev/null)" ]; then
  #           cp -r _rendered/* book/
  #           echo "‚úÖ Livros sincronizados em book/ com sucesso"
            
  #           # Lista livros sincronizados
  #           echo "üìã Livros sincronizados:"
  #           for book in $(ls book/ | grep -E '^[A-Z]{3}[0-9]{4}

  #     - name: Gera √≠ndice dos livros (JSON)
  #       run: |
  #         echo "üìã Gerando √≠ndice de livros..."
  #         echo '{
  #           "books": [' > book/books-index.json
          
  #         first=true
  #         for folder in $(ls book 2>/dev/null | grep -v "books-index.json" || echo ""); do
  #           if [ -d "book/$folder" ]; then
  #             if [ "$first" = false ]; then
  #               echo ',' >> book/books-index.json
  #             fi
              
  #             # Extrai t√≠tulo do index.html se existir
  #             title="$folder"
  #             if [ -f "book/$folder/index.html" ]; then
  #               extracted_title=$(grep -o '<title[^>]*>[^<]*' "book/$folder/index.html" | sed 's/<title[^>]*>//' | head -1)
  #               if [ ! -z "$extracted_title" ]; then
  #                 title="$extracted_title"
  #               fi
  #             fi
              
  #             echo "    {
  #               \"id\": \"$folder\",
  #               \"title\": \"$title\",
  #               \"path\": \"$folder/index.html\",
  #               \"updated\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
  #             }" >> book/books-index.json
  #             first=false
  #           fi
  #         done
          
  #         echo '
  #           ],
  #           "last_updated": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
  #         }' >> book/books-index.json
          
  #         echo "‚úÖ √çndice gerado: $(cat book/books-index.json | jq '.books | length') livros"

  #     - name: Cria Pull Request para branch padr√£o
  #       id: create-pr
  #       uses: peter-evans/create-pull-request@v5
  #       with:
  #         token: ${{ env.TOKEN }}
  #         branch: books-render-$(date +%Y%m%d-%H%M%S)
  #         base: main  # ou master, dependendo da sua branch padr√£o
  #         title: "üìö Atualiza√ß√£o dos livros renderizados - $(date +'%Y-%m-%d %H:%M')"
  #         body: |
  #           ## üìñ Nova Renderiza√ß√£o dos Livros Quarto
            
  #           Esta PR cont√©m os livros atualizados renderizados a partir das mudan√ßas na branch `main`.
            
  #           ### üìã Detalhes da Renderiza√ß√£o
  #           - **Commit fonte**: ${{ github.sha }}
  #           - **Workflow**: ${{ github.run_id }}
  #           - **Data**: $(date +'%Y-%m-%d %H:%M:%S UTC')
  #           - **Triggering commit**: ${{ github.event.head_commit.message }}
            
  #           ### üìö Livros Renderizados
  #           $(ls _rendered 2>/dev/null | sed 's/^/- üìñ /' || echo "- Nenhum livro renderizado")
            
  #           ### üîÑ Mudan√ßas Inclu√≠das
  #           - ‚úÖ Livros Quarto renderizados para HTML na pasta `book/`
  #           - ‚úÖ √çndice de livros atualizado (`book/books-index.json`)
  #           - ‚úÖ Estrutura de arquivos organizada
            
  #           ### üìÅ Estrutura Adicionada/Atualizada
  #           ```
  #           book/
  #           ‚îú‚îÄ‚îÄ books-index.json     ‚Üê √çndice com metadata
  #           ‚îú‚îÄ‚îÄ livro1/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îú‚îÄ‚îÄ livro2/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îî‚îÄ‚îÄ ...
  #           ```
            
  #           ### üìù Arquivos Principais
  #           - `book/books-index.json` - √çndice com metadata dos livros
  #           - `book/*/index.html` - P√°ginas principais dos livros
  #           - Assets e recursos complementares
            
  #           ---
            
  #           ## üëÄ Review Checklist
            
  #           Por favor, verifique:
  #           - [ ] üìñ Livros foram renderizados corretamente
  #           - [ ] üé® Formata√ß√£o e estilos est√£o adequados  
  #           - [ ] üîó Links internos funcionam
  #           - [ ] üì± Layout √© responsivo
  #           - [ ] üìã √çndice JSON est√° correto
  #           - [ ] üìÅ Estrutura de pastas est√° organizada
            
  #           ---
  #           **‚ö†Ô∏è Esta PR requer aprova√ß√£o manual do propriet√°rio antes do merge.**
  #         labels: |
  #           books-update
  #           quarto-render
  #           needs-review
  #           automated-pr
  #         assignees: ${{ github.repository_owner }}
  #         draft: false
  #         commit-message: |
  #           üìö Adiciona/Atualiza livros renderizados
            
  #           Livros processados:
  #           $(ls _rendered 2>/dev/null | sed 's/^/- /' || echo "- Nenhum")
            
  #           - Renderiza√ß√£o Quarto ‚Üí HTML
  #           - √çndice JSON gerado automaticamente
  #           - Estrutura organizada em book/
            
  #           Commit fonte: ${{ github.sha }}
  #           Data: $(date +'%Y-%m-%d %H:%M:%S UTC')

  #     - name: Adiciona coment√°rio com instru√ß√µes
  #       if: steps.create-pr.outputs.pull-request-number
  #       uses: peter-evans/create-or-update-comment@v3
  #       with:
  #         token: ${{ env.TOKEN }}
  #         issue-number: ${{ steps.create-pr.outputs.pull-request-number }}
  #         body: |
  #           ## ü§ñ Instru√ß√µes Autom√°ticas
            
  #           ### üìã Status do Workflow
  #           ‚úÖ Livros renderizados com sucesso  
  #           ‚úÖ Pull Request criada  
  #           ‚è≥ **Aguardando sua aprova√ß√£o**  
            
  #           ### üîç Como Revisar
            
  #           1. **Verifique os arquivos alterados** na aba "Files changed"
  #           2. **Teste os livros localmente** se necess√°rio:
  #              ```bash
  #              git checkout update-books-$(date +%Y%m%d-%H%M%S)
  #              # Abra book/*/index.html no navegador
  #              ```
  #           3. **Aprove a PR** quando estiver satisfeito
            
  #           ### üìÅ Arquivos Importantes
  #           - `books-index.json` - Metadata dos livros
  #           - Cada pasta de livro cont√©m o HTML renderizado
            
  #           ---
  #           *Esta PR foi criada automaticamente e **requer sua aprova√ß√£o** para merge.*

  #     - name: Limpa arquivos tempor√°rios
  #       run: |
  #         rm -rf _rendered
  #         echo "‚úÖ Arquivos tempor√°rios removidos"

  # summary:
  #   needs: [render-and-create-pr]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Resultado final
  #       run: |
  #         if [ "${{ needs.render-and-create-pr.outputs.pull-request-number }}" ]; then
  #           echo "üéâ Pipeline conclu√≠do com sucesso!"
  #           echo "üìã Pull Request criada: #${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #           echo "‚è≥ Aguardando aprova√ß√£o do propriet√°rio do reposit√≥rio"
  #           echo "üëÄ Revisar em: ${{ github.server_url }}/${{ github.repository }}/pull/${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #         else
  #           echo "‚ÑπÔ∏è  Nenhuma PR foi criada (possivelmente sem mudan√ßas)"
  #         fi); do
  #             echo "   üìñ $book"
  #           done
  #         else
  #           echo "‚ö†Ô∏è  Nenhum livro foi renderizado"
  #           exit 1
  #         fi

  #     - name: Gera √≠ndice dos livros (JSON)
  #       run: |
  #         echo "üìã Gerando √≠ndice de livros..."
  #         echo '{
  #           "books": [' > book/books-index.json
          
  #         first=true
  #         for folder in $(ls book 2>/dev/null | grep -v "books-index.json" || echo ""); do
  #           if [ -d "book/$folder" ]; then
  #             if [ "$first" = false ]; then
  #               echo ',' >> book/books-index.json
  #             fi
              
  #             # Extrai t√≠tulo do index.html se existir
  #             title="$folder"
  #             if [ -f "book/$folder/index.html" ]; then
  #               extracted_title=$(grep -o '<title[^>]*>[^<]*' "book/$folder/index.html" | sed 's/<title[^>]*>//' | head -1)
  #               if [ ! -z "$extracted_title" ]; then
  #                 title="$extracted_title"
  #               fi
  #             fi
              
  #             echo "    {
  #               \"id\": \"$folder\",
  #               \"title\": \"$title\",
  #               \"path\": \"$folder/index.html\",
  #               \"updated\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
  #             }" >> book/books-index.json
  #             first=false
  #           fi
  #         done
          
  #         echo '
  #           ],
  #           "last_updated": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
  #         }' >> book/books-index.json
          
  #         echo "‚úÖ √çndice gerado: $(cat book/books-index.json | jq '.books | length') livros"

  #     - name: Cria Pull Request para branch padr√£o
  #       id: create-pr
  #       uses: peter-evans/create-pull-request@v5
  #       with:
  #         token: ${{ env.TOKEN }}
  #         branch: books-render-$(date +%Y%m%d-%H%M%S)
  #         base: main  # ou master, dependendo da sua branch padr√£o
  #         title: "üìö Atualiza√ß√£o dos livros renderizados - $(date +'%Y-%m-%d %H:%M')"
  #         body: |
  #           ## üìñ Nova Renderiza√ß√£o dos Livros Quarto
            
  #           Esta PR cont√©m os livros atualizados renderizados a partir das mudan√ßas na branch `main`.
            
  #           ### üìã Detalhes da Renderiza√ß√£o
  #           - **Commit fonte**: ${{ github.sha }}
  #           - **Workflow**: ${{ github.run_id }}
  #           - **Data**: $(date +'%Y-%m-%d %H:%M:%S UTC')
  #           - **Triggering commit**: ${{ github.event.head_commit.message }}
            
  #           ### üìö Livros Renderizados
  #           $(ls _rendered 2>/dev/null | sed 's/^/- üìñ /' || echo "- Nenhum livro renderizado")
            
  #           ### üîÑ Mudan√ßas Inclu√≠das
  #           - ‚úÖ Livros Quarto renderizados para HTML na pasta `book/`
  #           - ‚úÖ √çndice de livros atualizado (`book/books-index.json`)
  #           - ‚úÖ Estrutura de arquivos organizada
            
  #           ### üìÅ Estrutura Adicionada/Atualizada
  #           ```
  #           book/
  #           ‚îú‚îÄ‚îÄ books-index.json     ‚Üê √çndice com metadata
  #           ‚îú‚îÄ‚îÄ livro1/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îú‚îÄ‚îÄ livro2/
  #           ‚îÇ   ‚îú‚îÄ‚îÄ index.html
  #           ‚îÇ   ‚îî‚îÄ‚îÄ assets/
  #           ‚îî‚îÄ‚îÄ ...
  #           ```
            
  #           ### üìù Arquivos Principais
  #           - `book/books-index.json` - √çndice com metadata dos livros
  #           - `book/*/index.html` - P√°ginas principais dos livros
  #           - Assets e recursos complementares
            
  #           ---
            
  #           ## üëÄ Review Checklist
            
  #           Por favor, verifique:
  #           - [ ] üìñ Livros foram renderizados corretamente
  #           - [ ] üé® Formata√ß√£o e estilos est√£o adequados  
  #           - [ ] üîó Links internos funcionam
  #           - [ ] üì± Layout √© responsivo
  #           - [ ] üìã √çndice JSON est√° correto
  #           - [ ] üìÅ Estrutura de pastas est√° organizada
            
  #           ---
  #           **‚ö†Ô∏è Esta PR requer aprova√ß√£o manual do propriet√°rio antes do merge.**
  #         labels: |
  #           books-update
  #           quarto-render
  #           needs-review
  #           automated-pr
  #         assignees: ${{ github.repository_owner }}
  #         draft: false
  #         commit-message: |
  #           üìö Adiciona/Atualiza livros renderizados
            
  #           Livros processados:
  #           $(ls _rendered 2>/dev/null | sed 's/^/- /' || echo "- Nenhum")
            
  #           - Renderiza√ß√£o Quarto ‚Üí HTML
  #           - √çndice JSON gerado automaticamente
  #           - Estrutura organizada em book/
            
  #           Commit fonte: ${{ github.sha }}
  #           Data: $(date +'%Y-%m-%d %H:%M:%S UTC')

  #     - name: Adiciona coment√°rio com instru√ß√µes
  #       if: steps.create-pr.outputs.pull-request-number
  #       uses: peter-evans/create-or-update-comment@v3
  #       with:
  #         token: ${{ env.TOKEN }}
  #         issue-number: ${{ steps.create-pr.outputs.pull-request-number }}
  #         body: |
  #           ## ü§ñ Instru√ß√µes Autom√°ticas
            
  #           ### üìã Status do Workflow
  #           ‚úÖ Livros renderizados com sucesso  
  #           ‚úÖ Pull Request criada  
  #           ‚è≥ **Aguardando sua aprova√ß√£o**  
            
  #           ### üîç Como Revisar
            
  #           1. **Verifique os arquivos alterados** na aba "Files changed"
  #           2. **Teste os livros localmente** se necess√°rio:
  #              ```bash
  #              git checkout update-books-$(date +%Y%m%d-%H%M%S)
  #              # Abra book/*/index.html no navegador
  #              ```
  #           3. **Aprove a PR** quando estiver satisfeito
            
  #           ### üìÅ Arquivos Importantes
  #           - `books-index.json` - Metadata dos livros
  #           - Cada pasta de livro cont√©m o HTML renderizado
            
  #           ---
  #           *Esta PR foi criada automaticamente e **requer sua aprova√ß√£o** para merge.*

  #     - name: Limpa arquivos tempor√°rios
  #       run: |
  #         rm -rf _rendered
  #         echo "‚úÖ Arquivos tempor√°rios removidos"

  # summary:
  #   needs: [render-and-create-pr]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Resultado final
  #       run: |
  #         if [ "${{ needs.render-and-create-pr.outputs.pull-request-number }}" ]; then
  #           echo "üéâ Pipeline conclu√≠do com sucesso!"
  #           echo "üìã Pull Request criada: #${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #           echo "‚è≥ Aguardando aprova√ß√£o do propriet√°rio do reposit√≥rio"
  #           echo "üëÄ Revisar em: ${{ github.server_url }}/${{ github.repository }}/pull/${{ needs.render-and-create-pr.outputs.pull-request-number }}"
  #         else
  #           echo "‚ÑπÔ∏è  Nenhuma PR foi criada (possivelmente sem mudan√ßas)"
  #         fi