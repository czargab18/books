name: "[build] - Renderizar Books Quarto"

on:
  workflow_dispatch:
  push:
    branches: [main, dev1]
    paths: ["build/**/*.qmd", "build/**/*.yml"]
  pull_request:
    branches: [main, dev1]
    paths: ["build/**/*.qmd", "build/**/*.yml"]

permissions:
  contents: write
  pages: write
  pull-requests: read

jobs:
  evento:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      EVENTO: ${{ steps.tipo_evento.outputs.evento }}
    steps:
      - name: Verificar tipo de evento
        id: tipo_evento
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "evento=dispatch" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "evento=pull" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "evento=push" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "merge_group" ]]; then
            echo "evento=mergegroups" >> $GITHUB_OUTPUT
          else
            echo "evento=outro" >> $GITHUB_OUTPUT
          fi
          cat $GITHUB_OUTPUT  

  detectar:
    runs-on: ubuntu-latest
    needs: [evento]
    environment:
      name: ENVIRONMENT
    env:
      REPO_SYNC: ${{ secrets.REPO_SYNC }}
      USEREMAIL: ${{ secrets.USEREMAIL }}
      USERNAME: ${{ github.repository_owner }}
      TIPO_EVENTO: ${{ needs.evento.outputs.EVENTO }}
    outputs:
      FOLDERS_LISTA: ${{ steps.lista.outputs.folders_lista }}
    steps:
      - name: Clona o Repositório BOOKS
        uses: actions/checkout@v4
        with:
          repository: ${{ env.USERNAME  }}/books
          token: ${{ secrets.REPO_SYNC }}
          path: books
          ref: main
          fetch-depth: 2

      - name: Lista Estrutura do Workspace
        run: |
          echo "Estrutura do workspace:"
          ls books

      - name: Identificar arquivos alterados
        id: arquivos-alterados
        run: |
          cd books
          echo "Verificando o tipo de evento: $TIPO_EVENTO"
          if [[ "$TIPO_EVENTO" == "pull" ]]; then
            gh api "repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | jq -r '.[].filename' > arquivos.txt
          elif [[ "$TIPO_EVENTO" == "push" ]]; then
            git diff --name-only ${{ github.event.before }} ${{ github.sha }} > arquivos.txt
          else
            git ls-files | grep -E '^build/.*\.(qmd|yml)$' > arquivos.txt
          fi
          echo "Arquivos detectados:"
          cat arquivos.txt || true
          if [ ! -s arquivos.txt ]; then
            echo "AVISO: Nenhum arquivo alterado foi detectado para o evento $TIPO_EVENTO"
          fi

      - name: Extrair nomes de subdiretórios dos arquivos alterados
        id: extrair_subdirs
        run: |
          cd books
          echo "Arquivos encontrados:"
          cat arquivos.txt || true
          FILES_NAMES=$(cat arquivos.txt)
          if [ -z "$FILES_NAMES" ]; then
            echo "AVISO: arquivos.txt está vazio, nenhum diretório será listado!"
          fi
          echo "$FILES_NAMES" | grep -oE '^build/([A-Z]{3}[0-9]{4})/' || echo "Nenhum diretório encontrado pelo grep"
          echo "$FILES_NAMES" | grep -oE '^build/([A-Z]{3}[0-9]{4})/' | cut -d'/' -f2 > subdirs.txt

      - name: Montar lista única de subdiretórios e exportar output
        id: lista
        run: |
          cd books
          FOLDERS_NAMES=$(cat subdirs.txt | sort | uniq | xargs)
          echo "Exibindo subdiretórios alterados: $FOLDERS_NAMES"
          echo "folders_lista=$FOLDERS_NAMES" >> $GITHUB_OUTPUT

      - name: Movendo livros detectados para _books
        if: steps.lista.outputs.folders_lista != ''
        env:
          FOLDERS_LISTA: ${{ steps.lista.outputs.folders_lista }}
        run: |
          cd books
          mkdir -p ../_books
          for folder in $FOLDERS_LISTA; do
            if [ -d "build/${folder}" ]; then
              mv "build/${folder}" ../_books/
            else
              echo "Diretório build/${folder} não encontrado!"
            fi
          done

      - name: Exportar lista de livros alterados
        uses: actions/upload-artifact@v4
        with:
          name: books_detectados
          path: _books

  renderizar:
    needs: [detectar]
    runs-on: ubuntu-latest
    if: needs.detectar.outputs.FOLDERS_LISTA != ''
    environment:
      name: ENVIRONMENT
    env:
      FOLDERS_LISTA: ${{ needs.detecar.outputs.FOLDERS_LISTA }}
      REPO_SYNC: ${{ secrets.REPO_SYNC }}
      USEREMAIL: ${{ secrets.USEREMAIL }}
      USERNAME: ${{ github.repository_owner }}
    steps:
      # - name: Clona o Repositório BOOKS
      #   uses: actions/checkout@v4
      #   with:
      #     repository: ${{ env.USERNAME  }}/books
      #     token: ${{ secrets.REPO_SYNC }}
      #     path: books
      #     ref: main
      #     fetch-depth: 2

      - name: Baixar artefato com lista de livros alterados
        uses: actions/download-artifact@v4
        with:
          name: books_detectados
          path: "_books"

      - name: Setup Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Renderizar livros Quarto
        env:
          FOLDERS_LISTA: ${{ needs.detectar.outputs.FOLDERS_LISTA }}
        run: |
          cd _books
          echo "$FOLDERS_LISTA" | tr ' ' '\n' | while read folder; do
            if [ -d "${folder}" ]; then
              echo "Renderizando livro: $folder"
              quarto render "${folder}" --to html --execute --quiet
            else
              echo "Diretório ${folder} não encontrado!"
            fi
          done

      # - name: Mover livros renderizados para _books
      #   run: |
      #     cd books
      #     mkdir -p ../_books
      #     for folder in $FOLDERS_LISTA; do
      #       if [ -d "docs/${folder}" ]; then
      #         mv "docs/${folder}" ../_books/
      #       else
      #         echo "Diretório docs/${folder} não encontrado!"
      #       fi
      #     done

      - name: Exibir livros renderizados (salvos em ./_books/)
        run: |
          echo "Livros renderizados com sucesso!"
          ls ../_books || true

      - name: Exportar livros renderizados
        uses: actions/upload-artifact@v4
        with:
          name: books_renderizados
          path: books/../_books

  backend:
    needs: [renderizar]
    runs-on: ubuntu-latest
    if: needs.detectar.outputs.FOLDERS_LISTA != ''
    env:
      FOLDERS_LISTA: ${{ needs.detectar.outputs.FOLDERS_LISTA }}
      USERNAME: ${{ github.repository_owner }}
      REPO_SYNC: ${{ secrets.REPO_SYNC }}
    outputs:
      BOOKS_RENDERIZADOS: ${{ steps.backend_books.outputs.automacao_books }}
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Clona o Repositório BACKEND
        uses: actions/checkout@v4
        with:
          repository: ${{ env.USERNAME  }}/backend
          token: ${{ secrets.REPO_SYNC }}
          path: backend
          ref: main

      - name: Instalar pacote backend
        run: |
          set -e
          pip install -e backend

      - name: Baixar artefatos BOOKS RENDERIZADOS
        uses: actions/download-artifact@v4
        with:
          name: books_renderizados
          path: ./backend/_books/

      - name: Automação de livros (backend)
        id: backend_books
        run: | 
          python backend/test/renderbook.py
          echo "automacao_books=_books" >> $GITHUB_OUTPUT

      - name: Exporta atualizações dos livros renderizados
        uses: actions/upload-artifact@v4
        with:
          name: books_renderizados
          path: backend/_books

  pages:
    needs: [renderizar, backend]
    runs-on: ubuntu-latest
    env:
      USEREMAIL: ${{ secrets.USEREMAIL }}
      USERNAME: ${{ github.repository_owner }}
    steps:
      - name: Baixar artefato dos livros renderizados
        uses: actions/download-artifact@v4
        with:
          name: books_renderizados
          path: "."

      - name: Deploy para GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .
          publish_branch: books
          disable_nojekyll: true

      - name: Remover .nojekyll do diretório de publicação
        run: rm -f "./.nojekyll"