name: "[build] - Renderizar Books Quarto"

on:
  workflow_dispatch:
  push:
    branches: [main, dev1]
    paths: ["build/**/*.qmd", "build/**/*.yml"]
  pull_request:
    branches: [main, dev1]
    paths: ["build/**/*.qmd", "build/**/*.yml"]

permissions:
  contents: write
  pull-requests: read
  pages: write
  id-token: write

jobs:
  evento:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      EVENTO: ${{ steps.evento.outputs.evento }}
    steps:
      - name: Verificar tipo de evento
        id: evento
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "evento=dispatch" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "evento=pull" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "evento=push" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "merge_group" ]]; then
            echo "evento=mergegroups" >> $GITHUB_OUTPUT
          else
            echo "evento=outro" >> $GITHUB_OUTPUT
          fi
          cat $GITHUB_OUTPUT  

  detectar:
    runs-on: ubuntu-latest
    needs: [evento]
    environment:
      name: ENVIRONMENT
    env:
      REPO_SYNC: ${{ secrets.REPO_SYNC }}
      USEREMAIL: ${{ secrets.USEREMAIL }}
      USERNAME: ${{ github.repository_owner }}
      EVENTO: ${{ needs.evento.outputs.EVENTO }}
    outputs:
      FOLDERS_LISTA: ${{ steps.lista.outputs.folders_lista }}
    steps:
      - name: Clona o Repositório BOOKS
        uses: actions/checkout@v4
        with:
          repository: ${{ env.USERNAME  }}/books
          token: ${{ secrets.REPO_SYNC }}
          path: books
          ref: main
          fetch-depth: 30

      - name: Identificar arquivos alterados (pull request)
        if: github.event_name == 'pull_request'
        id: arquivos-alterados-pull
        run: |
          cd books
          gh api "repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | jq -r '.[].filename' > arquivos.txt

      - name: Identificar arquivos alterados (push)
        if: github.event_name == 'push'
        id: arquivos-alterados-push
        run: |
          cd books
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} > arquivos.txt

      - name: Identificar arquivos alterados (outros eventos)
        if: (github.event_name != 'pull_request') && (github.event_name != 'push')
        id: arquivos-alterados-outros
        run: |
          cd books
          git ls-files | grep -E '^build/.*\.(qmd|yml)$' > arquivos.txt

      - name: Extrair nomes de subdiretórios dos arquivos alterados
        id: extrair_subdirs
        run: |
          cd books
          FILES_NAMES=$(cat arquivos.txt)
          echo "$FILES_NAMES" | grep -oE '^build/([A-Z]{3}[0-9]{4})/' | cut -d'/' -f2 > subdirs.txt

      - name: Montar lista única de subdiretórios e exportar output
        id: lista
        run: |
          cd books
          FOLDERS_NAMES=$(cat subdirs.txt | sort | uniq | xargs)
          echo "folders_lista=$FOLDERS_NAMES" >> $GITHUB_OUTPUT

      - name: Movendo livros detectados para _books
        if: steps.lista.outputs.folders_lista != ''
        env:
          FOLDERS_LISTA: ${{ steps.lista.outputs.folders_lista }}
        run: |
          mkdir -p _books
          cd books
          for folder in $FOLDERS_LISTA; do
            if [ -d "build/${folder}" ]; then
              mv "build/${folder}" ../_books/
            fi
          done

      - name: Exporta Books como Artefato
        if: steps.lista.outputs.folders_lista != ''
        uses: actions/upload-artifact@v4
        with:
          name: books_detectados
          path: _books

  renderizar:
    needs: [detectar]
    runs-on: ubuntu-latest
    if: needs.detectar.outputs.FOLDERS_LISTA != ''
    env:
      FOLDERS_LISTA: ${{ needs.detectar.outputs.FOLDERS_LISTA }}
    outputs:
      BOOKS_RENDERIZADOS: ${{ steps.renderizar.outputs.books_renderizados }}

    steps:
      - name: Baixa artefato
        uses: actions/download-artifact@v4
        with:
          name: books_detectados
          path: _books

      - name: Setup Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Renderizar livros Quarto
        env:
          FOLDERS_LISTA: ${{ needs.detectar.outputs.FOLDERS_LISTA }}
        run: |
          set -e
          cd _books
          echo "$FOLDERS_LISTA" | tr ' ' '\n' | while read folder; do
            if [ -d "${folder}" ]; then
              echo "Renderizando livro: $folder"
              quarto render "${folder}" --to html --execute --output-dir "../../_docs/${folder}"
            else
              echo "Pasta não encontrada: $folder"
            fi
          done

      - name: Listar pastas e arquivos recursivamente
        run: |
          echo "Listando toda a estrutura de diretórios e arquivos:"
          ls -R

      - name: Exportar livros renderizados
        uses: actions/upload-artifact@v4
        with:
          name: books_renderizados
          path: "./_docs"

  backend:
    needs: [renderizar]
    runs-on: ubuntu-latest
    if: needs.detectar.outputs.FOLDERS_LISTA != ''
    environment:
      name: ENVIRONMENT
    env:
      REPO_SYNC: ${{ secrets.REPO_SYNC }}
      FOLDERS_LISTA: ${{ needs.detectar.outputs.FOLDERS_LISTA }}
      USERNAME: ${{ github.repository_owner }}
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Clona o Repositório BACKEND
        uses: actions/checkout@v4
        with:
          repository: ${{ env.USERNAME  }}/backend
          token: ${{ secrets.REPO_SYNC }}
          path: backend
          ref: main

      - name: Instalar pacote backend
        run: |
          set -e
          pip install -e backend

      - name: Baixar artefatos BOOKS RENDERIZADOS
        uses: actions/download-artifact@v4
        with:
          name: books_renderizados
          path: ./backend/_books/

      - name: Automação de livros (backend)
        id: backend_books
        run: |
          set -e
          python backend/test/renderbook.py 2>&1 | tee backend_output.log
          if grep -i "warning\|error" backend_output.log; then
            echo "Erros ou warnings detectados durante a execução do script!"
            exit 1
          fi

      - name: Exporta atualizações dos livros renderizados
        uses: actions/upload-artifact@v4
        with:
          name: books_backend
          path: ./backend/_books/

  sync_artefato:
    needs: [backend]
    runs-on: ubuntu-latest
    environment:
      name: ENVIRONMENT
    env:
      USEREMAIL: ${{ secrets.USEREMAIL }}
      USERNAME: ${{ github.repository_owner }}
    steps:
      - name: Checkout da branch 'books'
        uses: actions/checkout@v4
        with:
          ref: books
          path: books
          fetch-depth: 0

      - name: Baixar artefato dos livros renderizados
        uses: actions/download-artifact@v4
        with:
          name: books_backend
          path: _books

      - name: Sincronizar arquivos do artefato com a branch books
        run: |
          rsync -av --update _books/ books/

      - name: Remover symlinks do artefato
        run: |
          find books -type l -exec rm -f {} \;

      - name: Checar tamanho do artefato
        run: du -sh books

      - name: Lista toda a estrutura do workspace
        run: 
          ls -R books

      - name: Salvar artefato completo para deploy
        uses: actions/upload-artifact@v4
        with:
          name: artefatos_books
          path: "books"

  pages:
    needs: [sync_artefato]
    runs-on: ubuntu-latest
    environment:
      name: ENVIRONMENT
    steps:
      # - name: Baixar artefato completo para deploy
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: artefatos_books
      #     path: "."

      - name: Deploy para GitHub Pages
        uses: actions/deploy-pages@v4
        with:
          # folder: "."
          artifact_name: artefatos_books

  estatistica:
    needs: [sync_artefato]
    runs-on: ubuntu-latest
    if: needs.detectar.outputs.FOLDERS_LISTA != ''
    environment:
      name: ENVIRONMENT
    env:
      FOLDERS_LISTA: ${{ needs.detectar.outputs.FOLDERS_LISTA }}
      USERNAME: ${{ github.repository_owner }}
      USEREMAIL: ${{ secrets.USEREMAIL }} 
      REPO_SYNC: ${{ secrets.REPO_SYNC }}
    steps:
      - name: Clona o Repositório ESTATISTICA
        uses: actions/checkout@v4
        with:
          ref: book
          path: estatistica
          fetch-depth: 0
          repository: ${{ env.USERNAME }}/estatistica
          token: ${{ secrets.REPO_SYNC }}

      - name: Baixar artefato dos livros renderizados
        uses: actions/download-artifact@v4
        with:
          name: artefatos_books
          path: _books

      - name: Garante que a branch book existe e faz checkout
        working-directory: estatistica
        run: |
          if ! git rev-parse --verify book >/dev/null 2>&1; then
            git checkout --orphan book
            git rm -rf .
            git commit --allow-empty -m "Cria branch book inicial"
            git push origin book
          else
            git checkout book
          fi

      - name: Sincronizar arquivos do artefato com a branch book
        run: |
          rsync -av --update --delete _books/ estatistica/books/

      - name: Configura credenciais do Git
        working-directory: estatistica
        run: |
          git config user.name "${{ env.USERNAME }}"
          git config user.email "${{ env.USEREMAIL }}"
          git remote set-url origin https://x-access-token:${{ env.REPO_SYNC }}@github.com/${{ env.USERNAME }}/estatistica.git

      - name: Commit e Push dos livros renderizados
        working-directory: estatistica
        run: |
          git add books/
          git commit -m "books: atualiza books a partir do repo:books" || echo "Nada a commitar"
          git push --force origin book


  cleanup:
    runs-on: ubuntu-latest
    needs: [pages, estatistica]
    steps:
      - name: Limpa artefato books_backend
        uses: actions/delete-artifact@v4
        with:
          name: books_backend

      - name: Limpa artefato books_detectados
        uses: actions/delete-artifact@v4
        with:
          name: books_detectados

      - name: Limpar artefato books_renderizados
        uses: actions/delete-artifact@v4
        with:
          name: books_renderizados

      - name: Limpar artefato artefatos_books
        uses: actions/delete-artifact@v4
        with:
          name: artefatos_books