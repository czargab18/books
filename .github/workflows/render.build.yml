name: "[build] Renderizar Books Quarto"

on:
  workflow_dispatch:
  push:
    branches: [main, dev1]
    paths:
      - "build/*.qmd"
      - "build/*.yml"
  pull_request:
    branches: [main, dev1]
    paths:
      - "build/*.qmd"
      - "build/*.yml"

permissions:
  contents: write
  pull-requests: read

# env:
#   REPO_SYNC: ${{ secrets.ENVIRONMENT.REPO_SYNC }}
#   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#   USEREMAIL: ${{ secrets.ENVIRONMENT.USEREMAIL }}
#   USERNAME: ${{ github.repository_owner }}        # dono do repositório (owner)
#   REPO_NAME: ${{ github.event.repository.name }}  # nome do repositório
#   REPO_FULL: ${{ github.repository }}             # nome completo (owner/repo)

jobs:
  detectar:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      subfolders: ${{ steps.export_subfolders.outputs.subfolders }}

    steps: 
      - name: Checar o repositório 
        uses: actions/checkout@v4

      - name: Verificar tipo de evento
        id: tipo_evento
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "tipo_event=dispatch" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "tipo_event=pull" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "tipo_event=push" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "merge_group" ]]; then
            echo "tipo_event=mergegroups" >> $GITHUB_OUTPUT
          else
            echo "tipo_event=outro" >> $GITHUB_OUTPUT
          fi
          cat $GITHUB_OUTPUT

      - name: Identificar arquivos alterados
        id: arquivos-alterados
        env:
          TIPO_EVENTO: ${{ steps.tipo_evento.outputs.tipo_event }}
        run: |
          if [[ "${TIPO_EVENTO}" == "pull" ]]; then
            gh api "repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | jq -r '.[].filename' > arquivos.txt
          elif [[ "${TIPO_EVENTO}" == "push" ]]; then
            git diff --name-only ${{ github.event.before }} ${{ github.sha }} > arquivos.txt
          else
            git ls-files "build/*.qmd" "build/*.yml" > arquivos.txt
          fi

      - name: Identificar subdiretórios correspondentes
        id: export_subfolders
        run: |
          FILES=$(cat arquivos.txt)
          SUBFOLDERS=$(echo "$FILES" | grep -oE '^build/([A-Z]{3}[0-9]{4})/' | cut -d'/' -f2 | sort | uniq | xargs)
          echo "subfolders=$SUBFOLDERS" >> $GITHUB_OUTPUT

  renderizar:
    needs: [detectar]
    runs-on: ubuntu-latest
    env:
      SUBFOLDERS: ${{ needs.detectar.outputs.subfolders }}
    outputs:
      BOOKS_RENDER: ${{ steps.renderizar_books.outputs.books_render }}

    steps:
      - name: Checar o repositório
        uses: actions/checkout@v4

      - name: Instalar Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Renderizar Livros Quarto
        id: renderizar_books
        run: |
          if [ -z "$SUBFOLDERS" ]; then
            echo "Nenhum subdiretório encontrado."
            exit 0
          fi
          for folder in $SUBFOLDERS; do
            echo "Renderizando build/$folder ..."
            quarto render build/$folder --to html || echo "Falha ao renderizar build/$folder"
          done
          echo "books_render=docs" >> $GITHUB_OUTPUT

  backend:
    needs: [detectar, renderizar]
    runs-on: ubuntu-latest
    # environment:
    #   name: ENVIRONMENT
    env:
      REPO_SYNC: ${{ secrets.ENVIRONMENT.REPO_SYNC }}
      USEREMAIL: ${{ secrets.ENVIRONMENT.USEREMAIL }}
      BOOKS_RENDER: ${{ needs.renderizar.outputs.books_render }}
    outputs:
      BOOKS_RENDER: ${{ steps.backend_books.outputs.automacao_books }}

    steps:
      - name: Checar o repositório
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_SYNC }}

      - name: Instalar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Clonar o repo:backend
        uses: actions/checkout@v4
        with:
          repository: czargab18/backend
          token: ${{ secrets.REPO_SYNC }}
          path: backend
          ref: main

      - name: Instalar pacote backend
        run: |
          set -e
          pip install -e ./backend

      # - name: adicion link_books a lista em ./index.html
      #   id: backend_books
      #   run: |
      #       python backend/scripts/add_link_books.py
      #       python backend/scripts/corrigir_links.py
      #       echo "automacao_books=docs" >> $GITHUB_OUTPUT

  formatar:
    needs: [renderizar, backend]
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BOOKS_RENDER: ${{ needs.backend.outputs.books_render }}
    outputs:
      BOOKS_RENDER: ${{ steps.format_books.outputs.books_formatados }}

    steps:
      - name: Checar o repositório
        uses: actions/checkout@v4

      - name: Instalar Prettier
        run: npm install -g prettier

      - name: Formatar arquivos HTML, CSS e JS
        id: format_books
        run: |
          if [ -d "${{ env.BOOKS_RENDER }}" ]; then
            prettier --write "${{ env.BOOKS_RENDER }}/**/*.{html,css,js}"
            echo "books_render=${{ env.BOOKS_RENDER }}" >> $GITHUB_OUTPUT
          else
            echo "Diretório ${{ env.BOOKS_RENDER }} não encontrado."
            exit 1
          fi
          echo "books_formatados=docs" >> $GITHUB_OUTPUT

  repositorio:
    needs: [formatar]
    runs-on: ubuntu-latest
    env:
      BOOKS_RENDER: ${{ needs.formatar.outputs.books_formatados }}
      USERNAME: ${{ secrets.ENVIRONMENT.USERNAME }}
      USEREMAIL: ${{ secrets.ENVIRONMENT.USEREMAIL }}

    steps:
      - name: Checar o repositório
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configurar usuário do Git
        run: |
          git config --global user.name "${{ secrets.USERNAME }}"
          git config --global user.email "${{ secrets.USEREMAIL }}"

      - name: Verificar e criar branch "books" se necessário
        run: |
          if ! git show-ref --verify --quiet refs/heads/books; then
            echo "Branch 'books' não existe. Criando..."
            git checkout -b books
          else
            echo "Branch 'books' já existe. Alternando para ela..."
            git checkout books
          fi

      - name: Adicionar e commitar alterações
        run: |
          git add ${{ env.BOOKS_RENDER }}
          if git diff --cached --quiet; then
            echo "Nenhuma alteração para commitar."
          else
            git commit -m "chore: atualiza livros renderizados [ci skip]"
          fi

      - name: Enviar alterações para o GitHub
        run: |
          git push origin books

  estatistica:
    #  mover os arquivos de docs do repo: books , `repo:books/docs`, para a pasta books do repo: estatistica, repo:estatistica/books.
    # Atualizando os arquivos de books/docs em estatistica/books, caso estejam desatualizados, ou adicionando caso não existam em estatistica/books.
    needs: [formatar]
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BOOKS_RENDER: ${{ needs.formatar.outputs.books_formatados }}
    steps:
      - name: Checar o repositório
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
