name: build_render_books
# Descrição: Renderiza livros em Quarto e executa tarefas pós-processamento
# Reestruturar os Ambientes
# - detect: para detectar subdiretórios modificados
# - build: Adicionar as dependencias:
#          Quarto/cache + Python/cache: + repo-pgk:backend
# - render: para renderizar os livros
# - clean: para limpar arquivos temporários
# - repo: para gerenciar o repositório e enviar alterações

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 27 8 *"
  push:
    branches: [main, book]
    paths:
      - "**/build/*.qmd"
      - "**/build/*.yml"
  pull_request:
    branches: [main, book]
    paths:
      - "**/build/*.qmd"
      - "**/build/*.yml"

permissions:
  contents: write
  pull-requests: read

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      subfolders: ${{ steps.detect-subfolders.outputs.subfolders }}

    steps:
      - name: Checar o repositório
        uses: actions/checkout@v4

      - name: Listar arquivos modificados (preciso)
        id: arquivos
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
            REPO="${{ github.repository }}"
            FILES=$(curl -sSL -H "Authorization: Bearer $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER/files" | jq -r '.[].filename')
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          elif [[ "${{ github.event_name }}" == "merge_group" ]]; then
            FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          else
            FILES=$(git ls-files "build/*.qmd" "build/*.yml")
          fi
          echo "Arquivos modificados:"
          echo "$FILES"
          echo "$FILES" > arquivos_modificados.txt

      - name: Identificar subdiretórios correspondentes
        id: detect-subfolders
        run: |
          SUBFOLDERS=$(grep -oE '^build/[A-Z]{3}[0-9]{4}/' arquivos_modificados.txt | cut -d'/' -f2 | sort | uniq | xargs || echo "")
          echo "Subdiretórios detectados: $SUBFOLDERS"
          echo "subfolders=$SUBFOLDERS" >> $GITHUB_OUTPUT

  clean:
    needs: [detect, render]
    runs-on: ubuntu-latest
    steps:
      - name: Excluir todas as pastas 'delete/site_libs' de cada book
        env:
          SUBFOLDERS: ${{ needs.detect.outputs.subfolders }}
        run: |
          set -e
          if [ -n "$SUBFOLDERS" ]; then
            for dir in $SUBFOLDERS; do
              FIND_PATH="build/$dir/delete"
              if [ -d "$FIND_PATH" ]; then
                echo "Procurando e excluindo 'site_libs' em '$FIND_PATH'..."
                find "$FIND_PATH" -type d -name "site_libs" -exec rm -rf {} +
              else
                echo "Diretório '$FIND_PATH' não encontrado."
              fi
            done
          else
            echo "Nenhum subdiretório detectado. Nada a excluir."
          fi

  repo:
    needs: [clean]
    runs-on: ubuntu-latest
    steps:
      - name: Checar o repositório
        uses: actions/checkout@v4

      - name: Configurar Git
        run: |
          git config --global user.name "${{ secrets.USERNAME }}"
          git config --global user.email "${{ secrets.USEREMAIL }}"

      - name: Adicionar e commitar alterações
        run: |
          git add -A
          if git diff --cached --quiet; then
            echo "Nenhuma alteração para commitar."
          else
            git commit -m "chore: renderiza livros Quarto"
          fi

      - name: Enviar alterações para o GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if git rev-parse --verify HEAD >/dev/null 2>&1; then
            git push "https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git" HEAD:${{ github.ref }}
          fi