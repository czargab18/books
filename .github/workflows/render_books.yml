name: render_books
# Descrição: Renderiza livros em Quarto e executa tarefas pós-processamento

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 16 * 1"
  push:
    branches: [main]
    paths:
      - "**/build/*.qmd"
      - "**/build/*.yml"
      - "**/.github/workflows/*book*.yml"
  pull_request:
    branches: [main]
    paths:
      - "**/build/*.qmd"
      - "**/build/*.yml"
      - "**/.github/workflows/*book*.yml"

permissions:
  contents: write
  pages: write
  pull-requests: read

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      subfolders: ${{ steps.detect-subfolders.outputs.subfolders }}

    steps:
      - name: Checar o repositório
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Listar arquivos modificados
        id: arquivos
        run: |
          set -e
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch origin ${{ github.event.pull_request.base.ref }}
            FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...${{ github.sha }})
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            git fetch origin ${{ github.event.before }}
            FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          else
            FILES=$(git ls-files "build/*.qmd" "build/*.yml")
          fi
          echo "Arquivos modificados:"
          echo "$FILES"
          echo "arquivos_modificados<<EOF" >> $GITHUB_ENV
          echo "$FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Identificar subdiretórios correspondentes
        id: detect-subfolders
        run: |
          MATCHED_SUBFOLDERS=$(echo "${{ env.arquivos_modificados }}" | grep -oE '^build/[A-Z]{3}[0-9]{4}/' | cut -d'/' -f2 | sort | uniq | xargs || echo "")
          echo "Subdiretórios detectados: $MATCHED_SUBFOLDERS"
          echo "subfolders=$MATCHED_SUBFOLDERS" >> $GITHUB_OUTPUT

  build:
    needs: [detect]
    runs-on: ubuntu-latest
    if: ${{ needs.detect.outputs.subfolders != '' }}
    env:
      SUBFOLDERS: ${{ needs.detect.outputs.subfolders }}

    steps:
      - name: Checar o repositório
        uses: actions/checkout@v4

      - name: Configurar Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Instalar Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Instalar Python e dependências
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          
      - name: Instalar dependências Python
        run: |
          python -m venv .venv
          source .venv/bin/activate
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Salvar ambiente Python como artifact
        uses: actions/upload-artifact@v4
        with:
          name: venv
          path: .venv

      - name: Listar subdiretórios modificados
        run: |
          echo "Subdiretórios modificados: $SUBFOLDERS"

      # Exemplo: Renderização dos books em cada subdiretório detectado
      - name: Renderizar books (Quarto)
        run: |
          for folder in $SUBFOLDERS; do
            echo "Renderizando build/$folder ..."
            quarto render build/$folder --to html || echo "Falha ao renderizar build/$folder"
          done

      # Exemplo: Pós-processamento com Python, se necessário
      - name: Correções com Python
        env:
          PYTHONPATH: ./
        run: |
          for folder in $SUBFOLDERS; do
            echo "Processando build/$folder com Python..."
            # Substitua pelo comando correto se necessário
            # python -m backend.tasks.books.renderbook build/$folder
          done

      - name: Commitar e enviar mudanças se houver alterações
        run: |
          git add .
          git diff --cached --quiet || (git commit -m "Atualizações automáticas: Ambiente de teste" && git push)

# Usando css e js direto de https://www.estatistica.pro
# Logo, não será necessário gerar os mesmos neste repositório
  clean:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checar o repositório
        uses: actions/checkout@v4

      # - name: Limpar arquivos temporários
      #   run: |
      #     echo "Limpando arquivos temporários..." 

      - name: Excluir arquivos gerados pelo Quarto
        run: |
          set -e
          if [ -d "delete" ]; then
            echo "Excluindo diretório '/delete/'"
            rm -rf delete
          else
            echo "Diretório 'delete' não encontrado."
          fi
          if [ -d "ac" ]; then
            echo "Excluindo diretório 'ac'..."
            rm -rf ac
          else
            echo "Diretório 'ac' não encontrado."
          fi