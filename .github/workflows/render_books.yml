name: render_books
# Descrição: Renderiza livros em Quarto e executa tarefas pós-processamento

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 27 8 *"
  push:
    branches: [dev1]
    paths:
      - "**/build/*.qmd"
      - "**/build/*.yml"
      - "**/.github/workflows/*book*.yml"
  pull_request:
    branches: [dev1]
    paths:
      - "**/build/*.qmd"
      - "**/build/*.yml"
      - "**/.github/workflows/*book*.yml"

permissions:
  contents: write
  pages: write
  pull-requests: read

# Reestruturar os Ambientes
# - detect: para detectar subdiretórios modificados
# - build: Adicionar as dependencias:
#          Quarto/cache + Python/cache:backend
# - render: para renderizar os livros
# - clean: para limpar arquivos temporários
# - repo: para gerenciar o repositório e enviar alterações
# - pages: para publicar no GitHub Pages

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      subfolders: ${{ steps.detect-subfolders.outputs.subfolders }}

    steps:
      - name: Checar o repositório
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Listar arquivos modificados (preciso)
        id: arquivos
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
            REPO="${{ github.repository }}"
            FILES=$(curl -sSL -H "Authorization: Bearer $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER/files" | jq -r '.[].filename')
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          else
            FILES=$(git ls-files "build/*.qmd" "build/*.yml")
          fi
          echo "Arquivos modificados:"
          echo "$FILES"
          echo "$FILES" > arquivos_modificados.txt

      - name: Identificar subdiretórios correspondentes
        id: detect-subfolders
        run: |
          SUBFOLDERS=$(grep -oE '^build/[A-Z]{3}[0-9]{4}/' arquivos_modificados.txt | cut -d'/' -f2 | sort | uniq | xargs || echo "")
          echo "Subdiretórios detectados: $SUBFOLDERS"
          echo "subfolders=$SUBFOLDERS" >> $GITHUB_OUTPUT

  render:
    needs: [detect]
    runs-on: ubuntu-latest
    if: ${{ needs.detect.outputs.subfolders != '' }}
    env:
      SUBFOLDERS: ${{ needs.detect.outputs.subfolders }}

    steps:
      - name: Checar o repositório
        uses: actions/checkout@v4

      - name: Instalar Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Renderizar books (Quarto)
        run: |
          for folder in $SUBFOLDERS; do
            echo "Renderizando build/$folder ..."
            quarto render build/$folder --to html || echo "Falha ao renderizar build/$folder"
          done

      # Opcional: Pós-processamento Python
      # - name: Correções com Python
      #   env:
      #     PYTHONPATH: ./
      #   run: |
      #     for folder in $SUBFOLDERS; do
      #       echo "Processando build/$folder com Python..."
      #       # python -m backend.tasks.books.renderbook build/$folder
      #     done

  clean:
    needs: [render]
    runs-on: ubuntu-latest
    steps:
      - name: Checar o repositório
        uses: actions/checkout@v4

      - name: Excluir arquivos gerados pelo Quarto
        run: |
          set -e
          for dir in delete ac; do
            if [ -d "$dir" ]; then
              echo "Excluindo diretório '$dir'..."
              rm -rf "$dir"
            else
              echo "Diretório '$dir' não encontrado."
            fi
          done

  repo:
    needs: [render, clean]
    runs-on: ubuntu-latest

    steps:
      - name: Checar o repositório
        uses: actions/checkout@v4

      - name: Configurar Git para push
        uses: actions/configure-git@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configurar Usuario Git
        run: |
          git config --global user.name "${{ secrets.USERNAME }}"
          git config --global user.email "${{ secrets.USEREMAIL }}"

      - name: Configurar remote para push
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Commitar e enviar mudanças se houver alterações
        run: |
          git add .
          git diff --cached --quiet || (git commit -m "Atualizações automáticas: Renderização de livros" && git push origin renb)

      # - name: Criar Pull Request  
      #   uses: peter-evans/create-pull-request@v4
      #   with:
      #     branch: renb
      #     title: "Atualizações automáticas: Renderização de livros"
      #     body: "Este PR foi gerado automaticamente pelo workflow de renderização de livros."
      #     base: main
      #     labels: "automático, renderização, livro"
      #     delete-branch: true
      #     draft: false
      #     reviewers: ${{ secrets.REVIEWERS }}

  pages:
    needs: [repo]
    runs-on: ubuntu-latest

    steps:
      - name: Checar o repositório
        uses: actions/checkout@v4

      - name: Configurar Git para push
        uses: actions/configure-git@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configurar Usuario Git
        run: |
          git config --global user.name "${{ secrets.USERNAME }}"
          git config --global user.email "${{ secrets.USEREMAIL }}"

      - name: Configurar remote para push
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Deploy para GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/
          publish_branch: gh-pages
