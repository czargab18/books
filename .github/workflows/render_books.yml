# Melhorias sugeridas:
# Considere adicionar um step de teste/validação após renderização, para garantir que o build não quebrou.
# Se o workflow for rodar em repositórios privados, garanta que o token de acesso (GITHUB_TOKEN) tem permissões adequadas para push e criar PR.
# Documente no README o fluxo e os secrets necessários.

name: render_books
# Descrição: Renderiza livros em Quarto e executa tarefas pós-processamento

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 27 8 *"
  push:
    # branches: [main]
    branches: [dev1]
    paths:
      - "**/build/*.qmd"
      - "**/build/*.yml"
      - "**/.github/workflows/*book*.yml"
  pull_request:
    # branches: [main]
    branches: [dev1]
    paths:
      - "**/build/*.qmd"
      - "**/build/*.yml"
      - "**/.github/workflows/*book*.yml"

permissions:
  contents: write
  pages: write
  pull-requests: read

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      subfolders: ${{ steps.detect-subfolders.outputs.subfolders }}

    steps:
      - name: Checar o repositório
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Listar arquivos modificados
        id: arquivos
        run: |
          set -e
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch origin ${{ github.event.pull_request.base.ref }}
            FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...${{ github.sha }})
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            git fetch origin ${{ github.event.before }}
            FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          else
            FILES=$(git ls-files "build/*.qmd" "build/*.yml")
          fi
          echo "Arquivos modificados:"
          echo "$FILES"
          echo "arquivos_modificados<<EOF" >> $GITHUB_ENV
          echo "$FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Identificar subdiretórios correspondentes
        id: detect-subfolders
        run: |
          MATCHED_SUBFOLDERS=$(echo "${{ env.arquivos_modificados }}" | grep -oE '^build/[A-Z]{3}[0-9]{4}/' | cut -d'/' -f2 | sort | uniq | xargs || echo "")
          echo "Subdiretórios detectados: $MATCHED_SUBFOLDERS"
          echo "subfolders=$MATCHED_SUBFOLDERS" >> $GITHUB_OUTPUT

  build:
    needs: [detect]
    runs-on: ubuntu-latest
    if: ${{ needs.detect.outputs.subfolders != '' }}
    env:
      SUBFOLDERS: ${{ needs.detect.outputs.subfolders }}

    steps:
      - name: Checar o repositório
        uses: actions/checkout@v4

      - name: Instalar Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      # Renderização dos books em cada subdiretório detectado
      - name: Renderizar books (Quarto)
        run: |
          for folder in $SUBFOLDERS; do
            echo "Renderizando build/$folder ..."
            quarto render build/$folder --to html || echo "Falha ao renderizar build/$folder"
          done

      - name: Instalar Pacote backend
        run: |
          git clone https://x-access-token:${{secrets.ACCES_REPO}}@github.com/cesargabrielphd/backend.git
          cd backend
          pip install -e .

      - name: Correções com Python
        env:
          PYTHONPATH: ./
        run: |
          for folder in ${{ needs.detect-modificacao.outputs.subfolders }}; do
            echo "Corrigindo book in books/build/$folder"
           python -m backend.tasks.books.renderbook
          done
      

# Usando css e js direto de https://www.estatistica.pro
# Logo, não será necessário gerar os mesmos neste repositório
  clean:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checar o repositório
        uses: actions/checkout@v4

      # - name: Limpar arquivos temporários
      #   run: |
      #     echo "Limpando arquivos temporários..." 

      - name: Excluir arquivos gerados pelo Quarto
        run: |
          set -e
          if [ -d "delete" ]; then
            echo "Excluindo diretório '/delete/'"
            rm -rf delete
          else
            echo "Diretório 'delete' não encontrado."
          fi
          if [ -d "ac" ]; then
            echo "Excluindo diretório 'ac'..."
            rm -rf ac
          else
            echo "Diretório 'ac' não encontrado."
          fi

# Salvar tudo e enviar par ao GitHub
  repo:
    needs: [build, clean]
    runs-on: ubuntu-latest

    steps:
      - name: Checar o repositório
        uses: actions/checkout@v4

      - name: Configurar Git para push
        uses: actions/configure-git@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configurar remote para push
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Configurar Usuario Git
        run: |
          git config --global user.name "${{ secrets.USERNAME }}"
          git config --global user.email "${{ secrets.USEREMAIL }}"

      - name: Commitar e enviar mudanças se houver alterações
        run: |
          git add .
          git diff --cached --quiet || (git commit -m "Atualizações automáticas: Renderização de livros" && git push)
          git push origin renb

      # - name: Criar Pull Request  
      #   uses: peter-evans/create-pull-request@v4
      #   with:
      #     branch: renb
      #     title: "Atualizações automáticas: Renderização de livros"
      #     body: "Este PR foi gerado automaticamente pelo workflow de renderização de livros."
      #     base: main
      #     labels: "automático, renderização, livro"
      #     delete-branch: true
      #     draft: false
      #     reviewers: ${{ secrets.REVIEWERS }}
